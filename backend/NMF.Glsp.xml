<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NMF.Glsp</name>
    </assembly>
    <members>
        <member name="T:NMF.Glsp.Contracts.IClientSessionProvider">
            <summary>
            Denotes a GLSP session provider
            </summary>
        </member>
        <member name="P:NMF.Glsp.Contracts.IClientSessionProvider.DiagramType">
            <summary>
            The diagram type for which the provider can create sessions
            </summary>
        </member>
        <member name="M:NMF.Glsp.Contracts.IClientSessionProvider.CreateSession(System.Collections.Generic.IDictionary{System.String,System.Object},NMF.Models.Services.IModelServer)">
            <summary>
            Creates a session
            </summary>
            <param name="args">arguments passed by the GLSP client</param>
            <param name="modelServer">the model server for which to create the session</param>
            <returns>A GLSP session</returns>
        </member>
        <member name="P:NMF.Glsp.Contracts.IClientSessionProvider.SupportedActions">
            <summary>
            Gets a collection with supported action kinds
            </summary>
        </member>
        <member name="T:NMF.Glsp.Contracts.IGlspClientSession">
            <summary>
            Denotes a GLSP session
            </summary>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspClientSession.InitializeAsync(System.Action{NMF.Glsp.Protocol.BaseProtocol.ActionMessage},System.String)">
            <summary>
            Initializes the GLSP session
            </summary>
            <param name="messageHandler">A method that can be used to handle outgoing messages</param>
            <param name="clientId">The Client id</param>
            <returns>A task to support asynchronous operations</returns>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspClientSession.ProcessAsync(NMF.Glsp.Protocol.BaseProtocol.BaseAction)">
            <summary>
            Processes the provided action asynchronously
            </summary>
            <param name="action">The action that needs to be processed</param>
            <returns>A task to support asynchronous operations</returns>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspClientSession.DisposeAsync">
            <summary>
            Disposes the resources used by this client session
            </summary>
            <returns>A task to support asynchronous operations</returns>
        </member>
        <member name="T:NMF.Glsp.Contracts.IGlspServer">
            <summary>
            Denotes the interface for a GLSP server
            </summary>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspServer.InitializeAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
             Send an `initialize` request to the server. The server needs to be initialized in order to accept and
             process other requests and notifications. The {@link InitializeResult} ist cached and can be retrieved
             via the {@link GLSPClient.initializeResult} property.
             Only the first method invocation actually sends a request to the server. Subsequent invocations simply
             return the cached result.
            </summary>
            <param name="applicationId"></param>
            <param name="protocolVersion"></param>
            <param name="args"></param>
            <returns>A promise of the {@link InitializeResult}.</returns>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspServer.InitializeClientSessionAsync(System.String,System.String,System.String[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
             Send an `initializeClientSession` request to the server. One client application may open several session.
             Each individual diagram on the client side counts as one session and has to provide
             a unique clientId.
            </summary>
            <param name="clientSessionId">Unique identifier for the new client session</param>
            <param name="diagramType">Unique identifier of the diagram type for which the session should be configured.</param>
            <param name="args">Additional custom arguments.</param>
            <param name="clientActionKinds">The set of action kinds that can be handled by the client.
             Used by the server to know which dispatched actions should be forwarded to the client.</param>
            <returns>A promise that resolves if the initialization was successful</returns>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspServer.DisposeClientSessionAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
             Sends a `disposeClientSession` request to the server. This request has to be sent at the end of client session lifecycle
             e.g. when an editor widget is closed.
            </summary>
            <param name="clientSessionId">Unique identifier of the client session that should be disposed.</param>
            <param name="args">Additional custom arguments.</param>
            <returns>A promise that resolves if the disposal was successful</returns>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspServer.ShutdownAsync">
            <summary>
             Send a `shutdown` notification to the server.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspServer.ProcessAsync(System.String,NMF.Glsp.Protocol.BaseProtocol.BaseAction)">
            <summary>
             Send an action message to the server.
            </summary>
            <param name="clientId">the client ID</param>
            <param name="action">The message</param>
        </member>
        <member name="E:NMF.Glsp.Contracts.IGlspServer.Process">
            <summary>
            Gets raised when the client should process an action message
            </summary>
        </member>
        <member name="T:NMF.Glsp.Contracts.IGlspSession">
            <summary>
            Denotes a session with a client
            </summary>
        </member>
        <member name="P:NMF.Glsp.Contracts.IGlspSession.Root">
            <summary>
            The root of the graph
            </summary>
        </member>
        <member name="P:NMF.Glsp.Contracts.IGlspSession.Language">
            <summary>
            Gets the graphical language used in this session
            </summary>
        </member>
        <member name="P:NMF.Glsp.Contracts.IGlspSession.Trace">
            <summary>
            Gets the trace to trace skeletons created for semantic objects
            </summary>
        </member>
        <member name="P:NMF.Glsp.Contracts.IGlspSession.SelectedElements">
            <summary>
            The selected elements
            </summary>
        </member>
        <member name="P:NMF.Glsp.Contracts.IGlspSession.IsDirty">
            <summary>
            True, if the client session contains unsaved changes, otherwise false
            </summary>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspSession.SendToClient(NMF.Glsp.Protocol.BaseProtocol.BaseAction)">
            <summary>
            Send the given action to the client
            </summary>
            <param name="action">The action to send</param>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspSession.Synchronize">
            <summary>
            Sends the entire graph to the client
            </summary>
        </member>
        <member name="P:NMF.Glsp.Contracts.IGlspSession.CanUndo">
            <summary>
            True, if there is a transaction to undo, otherwise false
            </summary>
        </member>
        <member name="P:NMF.Glsp.Contracts.IGlspSession.CanRedo">
            <summary>
            True, if there is a transaction to redo, otherwise false
            </summary>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspSession.Undo">
            <summary>
            Undo the last transaction
            </summary>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspSession.Redo">
            <summary>
            Redo the last transaction
            </summary>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspSession.InitializeAsync(System.Uri)">
            <summary>
            Initializes the client for the given source model URI
            </summary>
            <param name="uri"></param>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspSession.Save(System.Uri)">
            <summary>
            Saves the content at the given URI
            </summary>
            <param name="uri">the URI where to save the session content or null, if the model should be saved at the default location</param>
        </member>
        <member name="M:NMF.Glsp.Contracts.IGlspSession.RequestAsync(NMF.Glsp.Protocol.BaseProtocol.RequestAction)">
            <summary>
            Sends a request to the client and waits for the response
            </summary>
            <param name="request">The request to the client</param>
            <returns>A task that completes when the client returns a response</returns>
        </member>
        <member name="T:NMF.Glsp.Contracts.ILayoutEngine">
            <summary>
            Denotes an interface for a component that can calculate layout information
            </summary>
        </member>
        <member name="M:NMF.Glsp.Contracts.ILayoutEngine.CalculateLayout(NMF.Glsp.Graph.GGraph)">
            <summary>
            Calculates a layout for the given graph
            </summary>
            <param name="graph">the graph which must be laid out</param>
        </member>
        <member name="M:NMF.Glsp.Contracts.ILayoutEngine.CalculateLayout(System.Collections.Generic.IEnumerable{NMF.Glsp.Graph.GElement})">
            <summary>
            Calculates a layout for the given elements
            </summary>
            <param name="elements">the elements that should be laid out</param>
        </member>
        <member name="T:NMF.Glsp.Graph.GEdge">
            <summary>
            Denotes an edge in the GLSP graph structure
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GEdge.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GEdge.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
            <param name="id">The id of the edge</param>
        </member>
        <member name="P:NMF.Glsp.Graph.GEdge.SourceId">
            <summary>
            Gets or sets the source id of the edge
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GEdge.TargetId">
            <summary>
            Gets or sets the target id of the edge
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GEdge.EdgeSourcePointX">
            <summary>
            Gets or sets the X position of the edge start anchor
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GEdge.EdgeSourcePointY">
            <summary>
            Gets or sets the Y position of the edge start anchor
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GEdge.EdgeTargetPointX">
            <summary>
            Gets or sets the X position of the edge target anchor
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GEdge.EdgeTargetPointY">
            <summary>
            Gets or sets the Y position of the edge target anchor
            </summary>
        </member>
        <member name="E:NMF.Glsp.Graph.GEdge.SourceIdChanged">
            <summary>
            Event that is raised if the source id is changed
            </summary>
        </member>
        <member name="E:NMF.Glsp.Graph.GEdge.TargetIdChanged">
            <summary>
            Event that is raised if the target id is changed
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GEdge.SupportsChangingSourceId">
            <summary>
            True, if an event listener is registered to handle changes of the source id
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GEdge.SupportsChangingTargetId">
            <summary>
            True, if an event listener is registered to handle changes of the target id
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GEdge.RoutingPoints">
            <summary>
            Gets a collection of routing points
            </summary>
        </member>
        <member name="T:NMF.Glsp.Graph.GElement">
            <summary>
            Denotes a node in the graph model of GLSP
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GElement.#ctor">
            <summary>
            Creates a new element
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GElement.#ctor(System.String)">
            <summary>
            Creates a new element
            </summary>
            <param name="id">The id of the new element</param>
            <remarks>If the id is null, a new id is generated</remarks>
        </member>
        <member name="P:NMF.Glsp.Graph.GElement.Graph">
            <summary>
            The graph that this element belongs to
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GElement.Set``1(``0@,``0)">
            <summary>
            Sets the given field and return if any changes have been made
            </summary>
            <typeparam name="T">The field type</typeparam>
            <param name="field">The field</param>
            <param name="value">The new value</param>
            <returns>True, if the value is different than the field, otherwise false</returns>
        </member>
        <member name="P:NMF.Glsp.Graph.GElement.Type">
            <summary>
            Gets or sets the type of the element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GElement.Id">
            <summary>
            Gets the id of the element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GElement.Position">
            <summary>
            Gets or sets the position of the element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GElement.Alignment">
            <summary>
            Gets or sets the alignment of the element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GElement.Size">
            <summary>
            Gets or sets the size of the element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GElement.Parent">
            <summary>
            Gets or sets the parent of the graph element
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GElement.UpdateLayout">
            <summary>
            Updates the layout for this element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GElement.Children">
            <summary>
            Gets a collection of child elements
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GElement.CssClasses">
            <summary>
            Gets CSS classes assigned to this element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GElement.Details">
            <summary>
            Gets a dictionary of details for this element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GElement.Collectibles">
            <summary>
            Gets a dictionary of objects that should be disposed when this element is deleted
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GElement.Delete">
            <summary>
            Deletes this model element
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GElement.TryPerform(System.String,NMF.Glsp.Contracts.IGlspSession,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.Tasks.Task@)">
            <summary>
            Attempts to execute the operation of the given kind
            </summary>
            <param name="kind">The kind of operation to perform</param>
            <param name="session">The session in which the operation is performed</param>
            <param name="args">The arguments passed into the operation</param>
            <param name="task">The task that represents the running operation, or null of no operation was performed</param>
            <returns>True, if the operation was started successfully, otherwise False</returns>
        </member>
        <member name="E:NMF.Glsp.Graph.GElement.Deleted">
            <summary>
            Raised when the element is deleted
            </summary>
        </member>
        <member name="E:NMF.Glsp.Graph.GElement.PositionChanged">
            <summary>
            Raised when the position of this element changes
            </summary>
        </member>
        <member name="E:NMF.Glsp.Graph.GElement.SizeChanged">
            <summary>
            Raised when the size of this element changes
            </summary>
        </member>
        <member name="E:NMF.Glsp.Graph.GElement.AlignmentChanged">
            <summary>
            Raised when the alignment of this element changes
            </summary>
        </member>
        <member name="T:NMF.Glsp.Graph.GGraph">
            <summary>
            Represents a graph as denoted by GLSP
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GGraph.#ctor(System.String)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GGraph.Resolve(System.String)">
            <summary>
            Resolves the given element id
            </summary>
            <param name="id">The id of the element</param>
            <returns>The resolved graph element or null, if not found</returns>
        </member>
        <member name="M:NMF.Glsp.Graph.GGraph.RegisterId(System.String,NMF.Glsp.Graph.GElement)">
            <summary>
            Registers the given graph element with the provided id
            </summary>
            <param name="id">The id of the element</param>
            <param name="element">The actual element</param>
        </member>
        <member name="P:NMF.Glsp.Graph.GGraph.Graph">
            <inheritdoc />
        </member>
        <member name="T:NMF.Glsp.Graph.GLabel">
            <summary>
            Denotes a label in a GLSP graph
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GLabel.Text">
            <summary>
            Gets or sets the text of the label
            </summary>
        </member>
        <member name="E:NMF.Glsp.Graph.GLabel.TextChanged">
            <summary>
            Raised when the text changed
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GLabel.EdgeLabelPlacement">
            <summary>
            Denotes where to place the label on an edge
            </summary>
        </member>
        <member name="P:NMF.Glsp.Graph.GLabel.SupportsLabelChange">
            <summary>
            True, if the label supports changes, otherwise false
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GLabel.Validate(System.String)">
            <summary>
            Validates the given input text
            </summary>
            <param name="text">The text to validate</param>
            <returns>A validation status</returns>
        </member>
        <member name="T:NMF.Glsp.Graph.GNode">
            <summary>
            Denotes a node
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GNode.#ctor">
            <summary>
            Creates a new element
            </summary>
        </member>
        <member name="M:NMF.Glsp.Graph.GNode.#ctor(System.String)">
            <summary>
            Creates a new element
            </summary>
            <param name="id">The id of the new element</param>
            <remarks>If the id is null, a new id is generated</remarks>
        </member>
        <member name="T:NMF.Glsp.Language.AbstractNodeDescriptor`1">
            <summary>
            Defines a base class for a description of abstract classes
            </summary>
            <typeparam name="T">The semantic type of elements described by this descriptor</typeparam>
        </member>
        <member name="M:NMF.Glsp.Language.AbstractNodeDescriptor`1.DefineLayout">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Language.AbstractNodeDescriptor`1.CanCreateElement">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Glsp.Language.AbstractNodeDescriptor`1.CreateElement(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Language.DefaultTypes">
            <summary>
            Container for default Sprotty type names
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.Graph">
            <summary>
            The default type for a graph
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.Node">
            <summary>
            The default type for a node
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.Edge">
            <summary>
            The default type for an edge
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.Port">
            <summary>
            The default type for a port
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.Label">
            <summary>
            The default type for a label
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.Compartment">
            <summary>
            The default type for a compartment
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.CompartmentHeader">
            <summary>
            The default type for the header compartment
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.Button">
            <summary>
            The default type for a button
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.ExpandButton">
            <summary>
            Thze default type for an expander button
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.IssueMarker">
            <summary>
            The default type for an issue marker
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.NodeCircle">
            <summary>
            The default type for circular node
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.NodeRectangle">
            <summary>
            The default type for a rectangular node
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.NodeDiamond">
            <summary>
            The default type for a diamond node
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.RoutingPoint">
            <summary>
            The default type for a routing point
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.VolatileRoutingPoint">
            <summary>
            The default type for a volatile routing point
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.Html">
            <summary>
            The default type for a html element
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.ForeignObject">
            <summary>
            The default type for a foreign object
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.PreRendered">
            <summary>
            The default type for a pre-rendered object
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.ShapePreRendered">
            <summary>
            The default type for a pre-rendered shape
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.DefaultTypes.Svg">
            <summary>
            The type for SVG
            </summary>
        </member>
        <member name="T:NMF.Glsp.Language.DescriptorBase">
            <summary>
            Denotes the base class for graph element descriptors
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.DescriptorBase.D``1">
            <summary>
            Resolves the given descriptor type to a descriptor
            </summary>
            <typeparam name="T">The type of elements</typeparam>
            <returns>The descriptor instance, if any</returns>
        </member>
        <member name="M:NMF.Glsp.Language.DescriptorBase.CreateGraph(System.Object,NMF.Glsp.Notation.IDiagram,NMF.Glsp.Processing.ISkeletonTrace)">
            <summary>
            Creates the graph for the given semantic root element
            </summary>
            <param name="semanticRoot">The semantic root element</param>
            <param name="diagram">The notation diagram</param>
            <param name="trace">A skeleton trace</param>
            <returns>The Graph instance</returns>
        </member>
        <member name="M:NMF.Glsp.Language.DescriptorBase.DefineLayout">
            <summary>
            Called by the graphical language setup to initialize the layout described by this descriptor
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.DescriptorBase.CalculateTypeHints">
            <summary>
            Calculates type hints for this rule
            </summary>
            <returns>A collection of type hints</returns>
        </member>
        <member name="T:NMF.Glsp.Language.EdgeDescriptor`1">
            <summary>
            Denotes the base class to describe the appearance of transitions
            </summary>
            <typeparam name="TTransition">The semantic element type of the transition</typeparam>
        </member>
        <member name="M:NMF.Glsp.Language.EdgeDescriptor`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Glsp.Language.EdgeDescriptor`1.RouterKind">
            <summary>
            Gets the router kind
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.EdgeDescriptor`1.SourceNode``1(NMF.Glsp.Language.NodeDescriptor{``0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Sets the source of the edge represented by this descriptor
            </summary>
            <typeparam name="TSource">The semantic type of the source node</typeparam>
            <param name="descriptor">The descriptor to describe which source node should be used</param>
            <param name="selector">An expression to calculate the source node from the semantic model of the transition</param>
            <param name="canChangeSource">True, if the source element can be changed, otherwise False</param>
        </member>
        <member name="M:NMF.Glsp.Language.EdgeDescriptor`1.TargetNode``1(NMF.Glsp.Language.NodeDescriptor{``0},System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Sets the target of the edge represented by this descriptor
            </summary>
            <typeparam name="TTarget">The semantic type of the target node</typeparam>
            <param name="descriptor">The descriptor to describe which target node should be used</param>
            <param name="selector">An expression to calculate the target element from the semantic model of the transition</param>
            <param name="canChangeTarget">True, if the target element can be changed, otherwise False</param>
        </member>
        <member name="M:NMF.Glsp.Language.EdgeDescriptor`1.Label(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Specifies that a GLabel element should be created under the current node
            </summary>
            <param name="labelSelector">An expression calculating the text of the label</param>
            <param name="type">The GElement type of the label</param>
            <param name="canEdit">True, if the label can be added, otherwise False</param>
            <param name="guard">An expression to guard the visibility of the label, or null</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.EdgeDescriptor`1.CalculateTypeHints">
            <inheritdoc />
        </member>
        <member name="T:NMF.Glsp.Language.EdgeDescriptor`2">
            <summary>
            Denotes the base class to describe edges that are not represented by semantic elements
            </summary>
            <typeparam name="TSource">The semantic type of the edge source</typeparam>
            <typeparam name="TTarget">The semantic type of the edge target</typeparam>
        </member>
        <member name="M:NMF.Glsp.Language.EdgeDescriptor`2.ToolLabel(System.String)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Glsp.Language.EdgeDescriptor`2.SourceDescriptor">
            <summary>
            Gets the descriptor used for the source of the edge
            </summary>
        </member>
        <member name="P:NMF.Glsp.Language.EdgeDescriptor`2.TargetDescriptor">
            <summary>
            Gets the descriptor used for the target of the edge
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.EdgeDescriptor`2.DefineLayout">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Language.EdgeDescriptor`2.CreateElement(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="P:NMF.Glsp.Language.EdgeDescriptor`2.CanCreateElement">
            <inheritdoc />
        </member>
        <member name="T:NMF.Glsp.Language.EdgeMoveMode">
            <summary>
            Denotes where a label of an edge can be moved
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.EdgeMoveMode.None">
            <summary>
            Denotes that the edge cannot be moved at all
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.EdgeMoveMode.Edge">
            <summary>
            Denotes that the label can be moved along the edge
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.EdgeMoveMode.Free">
            <summary>
            Denotes that the label can be moved freely
            </summary>
        </member>
        <member name="T:NMF.Glsp.Language.EdgeSide">
            <summary>
            Denotes the side of an edge for label placement
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.EdgeSide.On">
            <summary>
            Denotes that the label is placed on the edge
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.EdgeSide.Top">
            <summary>
            Denotes that the label is placed on top of the edge
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.EdgeSide.Bottom">
            <summary>
            Denotes that the label is placed below the edge
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.EdgeSide.Left">
            <summary>
            Denotes that the label is placed left of the edge
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.EdgeSide.Right">
            <summary>
            Denotes that the label is placed right of the edge
            </summary>
        </member>
        <member name="T:NMF.Glsp.Language.ElementDescriptor`1">
            <summary>
            Denotes a descriptor for elements in the diagram
            </summary>
            <typeparam name="T">The semantic type of elements described by this descriptor</typeparam>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.CreateElement(System.String,System.Object)">
            <summary>
            Creates a new element
            </summary>
            <param name="parent">The semantic parent element</param>
            <param name="profile">The profile for the created element</param>
            <returns>A new element</returns>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.ToolLabel(System.String)">
            <summary>
            Gets the label used for the tool palette
            </summary>
            <param name="profile">The profile</param>
            <returns>The text used for tools</returns>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.RenderPopup(`0,NMF.Glsp.Protocol.Types.Bounds)">
            <summary>
            Renders a popup
            </summary>
            <param name="element">The element for which a popup should be rendered</param>
            <param name="dimension">The dimension of the popup</param>
            <returns>A HTML string rendering the popup</returns>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.GetElementName(`0)">
            <summary>
            Calculates a human-readable name for the given element
            </summary>
            <param name="element">the element</param>
            <returns>A human-readable name</returns>
        </member>
        <member name="P:NMF.Glsp.Language.ElementDescriptor`1.CanCreateElement">
            <summary>
            True, if an instance of this element type can be created, otherwise False
            </summary>
        </member>
        <member name="P:NMF.Glsp.Language.ElementDescriptor`1.ElementTypeId">
            <summary>
            Gets the element type id for elements created by this descriptor
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.Refine``1(NMF.Glsp.Language.ElementDescriptor{``0})">
            <summary>
            Refines the given other node descriptor
            </summary>
            <typeparam name="TOther">The semantic type of elements described by the other node descriptor</typeparam>
            <param name="other">The refined node descriptor</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.CssClass(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Sets the CSS classes applicable to this element
            </summary>
            <param name="cssClass">The CSS class</param>
            <param name="guard">A guard predicate or null, if the CSS class should be assigned unconditionally</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.CssClass(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Sets the CSS class applicable to this element
            </summary>
            <param name="selector">A selector expression which CSS class is applicable</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.Type(System.String)">
            <summary>
            Sets the GLSP type created for this node
            </summary>
            <param name="type">The type</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.Forward(System.String,System.Object)">
            <summary>
            Forwards the given value to the generated GElement
            </summary>
            <param name="key">The property key</param>
            <param name="value">The value for the included property</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.Forward(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Forwards the given value to the generated GElement
            </summary>
            <param name="key">The property key</param>
            <param name="selector">An expression calculating the actual value for the included property</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.CreateGraph(System.Object,NMF.Glsp.Notation.IDiagram,NMF.Glsp.Processing.ISkeletonTrace)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.Operation(System.String,System.Func{`0,NMF.Glsp.Contracts.IGlspSession,System.Threading.Tasks.Task},System.String)">
            <summary>
            Defines an operation applicable for elements described by this instance
            </summary>
            <param name="toolName">The name of the tool</param>
            <param name="operation">The operation</param>
            <param name="key">The key that should be used communicating the operation to the client</param>
            <returns>A syntax element to refine the operation</returns>
            <remarks>The key must be unique across all operations. If it is null, a key is inferred from the tool name.</remarks>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.Operation(System.String,System.Action{`0,NMF.Glsp.Contracts.IGlspSession},System.String)">
            <summary>
            Defines an operation applicable for elements described by this instance
            </summary>
            <param name="toolName">The name of the tool</param>
            <param name="operation">The operation</param>
            <param name="key">The key that should be used communicating the operation to the client</param>
            <returns>A syntax element to refine the operation</returns>
            <remarks>The key must be unique across all operations. If it is null, a key is inferred from the tool name.</remarks>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.SelectionIncludes(System.Func{`0,System.Collections.Generic.IEnumerable{NMF.Models.IModelElement}})">
            <summary>
            Specifies that when an element is selected, the selection should also include a collection of other model elements
            </summary>
            <param name="selector">A function that selects model elements that should also be selected</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.Profile(System.String)">
            <summary>
            Declares a profile with a given name
            </summary>
            <param name="profileName">the name of the profile</param>
        </member>
        <member name="M:NMF.Glsp.Language.ElementDescriptor`1.Profile(System.String,System.Func{`0})">
            <summary>
            Declares a profile with a given name
            </summary>
            <param name="profileName">the name of the profile</param>
            <param name="creator">A function used to create elements with this profile. If null, the default method CreateElement is used.</param>
        </member>
        <member name="T:NMF.Glsp.Language.GraphicalLanguage">
            <summary>
            Denotes a graphical language
            </summary>
        </member>
        <member name="P:NMF.Glsp.Language.GraphicalLanguage.DiagramType">
            <summary>
            Gets the diagram type supported by this graphical language
            </summary>
        </member>
        <member name="P:NMF.Glsp.Language.GraphicalLanguage.DefaultLayoutEngine">
            <summary>
            Gets the default layout engine for this language
            </summary>
        </member>
        <member name="P:NMF.Glsp.Language.GraphicalLanguage.StartRule">
            <summary>
            Gets the rule to start with
            </summary>
        </member>
        <member name="P:NMF.Glsp.Language.GraphicalLanguage.SupportedActions">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Language.GraphicalLanguage.ActionKindsSupportedByDefault">
            <summary>
            Gets a collection of action kinds supported by default
            </summary>
            <returns></returns>
        </member>
        <member name="P:NMF.Glsp.Language.GraphicalLanguage.AllRules">
            <summary>
            Gets a collection of all rules
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.GraphicalLanguage.Initialize">
            <summary>
            Initializes the graphical language
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.GraphicalLanguage.Descriptor``1">
            <summary>
            Resolves the given descriptor type to a descriptor
            </summary>
            <typeparam name="T">The type of elements</typeparam>
            <returns>The descriptor instance, if any</returns>
        </member>
        <member name="M:NMF.Glsp.Language.GraphicalLanguage.CalculateTypeHints">
            <summary>
            Calculates shape hints for this language
            </summary>
            <returns>A collection of shape hints</returns>
        </member>
        <member name="M:NMF.Glsp.Language.GraphicalLanguage.AddRule(NMF.Glsp.Language.DescriptorBase)">
            <summary>
            Adds the given rule to the list of supported descriptors
            </summary>
            <param name="rule"></param>
        </member>
        <member name="M:NMF.Glsp.Language.GraphicalLanguage.Create(System.Object,NMF.Glsp.Notation.IDiagram,NMF.Glsp.Processing.ISkeletonTrace)">
            <summary>
            Creates a graph element for the given semantic root element
            </summary>
            <param name="semanticRoot">The semantic root element</param>
            <param name="diagram">The notational instance</param>
            <param name="trace">The trace object</param>
            <returns>A graph notation</returns>
        </member>
        <member name="M:NMF.Glsp.Language.GraphicalLanguage.CreateSession(System.Collections.Generic.IDictionary{System.String,System.Object},NMF.Models.Services.IModelServer)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Language.GraphicalLanguage.RetrieveRootActions(System.String)">
            <summary>
            Obtains a collection of root actions
            </summary>
            <param name="contextId"></param>
            <returns></returns>
        </member>
        <member name="T:NMF.Glsp.Language.IAdhocEdgeSyntax">
            <summary>
            Denotes an interface for syntax provided for ad-hoc edges
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.IAdhocEdgeSyntax.WithLabel(System.Func{System.String})">
            <summary>
            Sets the label for the generated edge to the given value provider
            </summary>
            <param name="label">A function returning the (optionally localized) tool label</param>
            <returns>A syntax instance for chaining purposes</returns>
        </member>
        <member name="M:NMF.Glsp.Language.IAdhocEdgeSyntax.WithType(System.String)">
            <summary>
            Customizes the type with which the edges are rendered
            </summary>
            <param name="type">The type string</param>
            <returns>A syntax instance for chaining purposes</returns>
        </member>
        <member name="T:NMF.Glsp.Language.AdhocEdgeSyntaxExtensions">
            <summary>
            Provides convenience methods for <see cref="T:NMF.Glsp.Language.IAdhocEdgeSyntax"/>
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.AdhocEdgeSyntaxExtensions.WithLabel(NMF.Glsp.Language.IAdhocEdgeSyntax,System.String)">
            <summary>
            Sets the label for the generated edge to the given value provider
            </summary>
            <param name="syntax">The syntax instance</param>
            <param name="label">The tool label</param>
            <returns>A syntax instance for chaining purposes</returns>
        </member>
        <member name="T:NMF.Glsp.Language.IChildSyntax`1">
            <summary>
            Denotes the syntax used to customize how elements appear in menus
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.IChildSyntax`1.HideIn(System.Func{System.String,System.Boolean})">
            <summary>
            Defines that the option should not be shown in the contexts defined by the given predicate
            </summary>
            <param name="contextIdPredicate">A predicate to check the context ids</param>
            <returns>A child syntax instance for chaining purposes</returns>
        </member>
        <member name="T:NMF.Glsp.Language.IChildSyntax">
            <summary>
            Denotes a simple child syntax
            </summary>
        </member>
        <member name="T:NMF.Glsp.Language.ChildSyntaxExtensions">
            <summary>
            Provides convenience methods for <see cref="T:NMF.Glsp.Language.IChildSyntax`1"/>
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.ChildSyntaxExtensions.HideInPalette``1(NMF.Glsp.Language.IChildSyntax{``0})">
            <summary>
            Defines that the option should not be visible in the palette
            </summary>
            <param name="syntax">The syntax</param>
            <returns>A child syntax instance for chaining purposes</returns>
        </member>
        <member name="M:NMF.Glsp.Language.ChildSyntaxExtensions.HideIn``1(NMF.Glsp.Language.IChildSyntax{``0},System.String)">
            <summary>
            Defines that the option should not be visible in the given context id
            </summary>
            <param name="syntax">The syntax</param>
            <param name="contextId">The id of the context for which the option should be hidden</param>
            <returns>A child syntax instance for chaining purposes</returns>
        </member>
        <member name="T:NMF.Glsp.Language.IEdgeLabelSyntax`1">
            <summary>
            Extends the label syntax for labels created on an edge
            </summary>
            <typeparam name="T">The semantic type of elements for which a label is created</typeparam>
        </member>
        <member name="M:NMF.Glsp.Language.IEdgeLabelSyntax`1.At(System.Double,NMF.Glsp.Language.EdgeSide,System.Boolean,System.Nullable{System.Double})">
            <summary>
            Overrides the positioning of the label to a relative position
            </summary>
            <param name="pos">The relative position of the label, from 0 (source anchor) to 1 (target anchor)</param>
            <param name="rotate">True, if the label should be rotated, otherwise false</param>
            <param name="side">Denotes on which side the label is placed</param>
            <param name="offset">An offset to the next node or edge</param>
            <returns>A label syntax element for chaining purposes</returns>
        </member>
        <member name="M:NMF.Glsp.Language.IEdgeLabelSyntax`1.MoveMode(NMF.Glsp.Language.EdgeMoveMode)">
            <summary>
            Sets the move mode of the edge label
            </summary>
            <param name="mode">The mode in which the label can be moved</param>
            <returns>A label syntax element for chaining purposes</returns>
        </member>
        <member name="T:NMF.Glsp.Language.ILabelSyntax`2">
            <summary>
            Denotes an interface for a syntax to customize labels
            </summary>
            <typeparam name="T">The semantic type of elements for which a label is created</typeparam>
            <typeparam name="TSyntax">The syntax type</typeparam>
        </member>
        <member name="M:NMF.Glsp.Language.ILabelSyntax`2.If(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds a condition for when the label is generated
            </summary>
            <param name="guard">A function expression expressing a guard condition</param>
            <returns>A label syntax element for chaining purposes</returns>
        </member>
        <member name="M:NMF.Glsp.Language.ILabelSyntax`2.WithType(System.String)">
            <summary>
            Overrides the GLSP type created for the label
            </summary>
            <param name="type">The GLSP type for the label</param>
            <returns>A label syntax element for chaining purposes</returns>
        </member>
        <member name="M:NMF.Glsp.Language.ILabelSyntax`2.Validate(System.Func{`0,System.String,NMF.Glsp.Protocol.Validation.ValidationStatus})">
            <summary>
            Registers a function to validate the label value
            </summary>
            <param name="validator">A function that validates inputs</param>
            <returns>A label syntax element for chaining purposes</returns>
        </member>
        <member name="M:NMF.Glsp.Language.ILabelSyntax`2.WithSetter(System.Action{`0,System.String})">
            <summary>
            Overrides the setter of the label
            </summary>
            <param name="setter">A setter function or null to make the label readonly</param>
            <returns>A label syntax element for chaining purposes</returns>
        </member>
        <member name="T:NMF.Glsp.Language.ILabelSyntax`1">
            <summary>
            Denotes a basic label syntax
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NMF.Glsp.Language.LabelSyntaxExtensions">
            <summary>
            Provides convenience methods for <see cref="T:NMF.Glsp.Language.ILabelSyntax`2"/>
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.LabelSyntaxExtensions.Validate``2(NMF.Glsp.Language.ILabelSyntax{``0,``1},System.Func{``0,System.String,System.Boolean},System.String)">
            <summary>
            Registers a function to validate the label value
            </summary>
            <param name="syntax">The syntax element</param>
            <param name="validator">A function that validates inputs</param>
            <param name="message">The error message in case the clause evaluates to false</param>
            <returns>A label syntax element for chaining purposes</returns>
        </member>
        <member name="M:NMF.Glsp.Language.LabelSyntaxExtensions.Validate``2(NMF.Glsp.Language.ILabelSyntax{``0,``1},System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Registers a function to validate the label value
            </summary>
            <param name="syntax">The syntax element</param>
            <param name="validator">A function that validates inputs</param>
            <param name="message">The error message in case the clause evaluates to false</param>
            <returns>A label syntax element for chaining purposes</returns>
        </member>
        <member name="T:NMF.Glsp.Language.INodeLabelSyntax`1">
            <summary>
            Extends the syntax elements for configurations possible at a node label
            </summary>
            <typeparam name="T">The semantic type of elements for which a label is created</typeparam>
        </member>
        <member name="M:NMF.Glsp.Language.INodeLabelSyntax`1.At(System.Double,System.Double)">
            <summary>
            Overrides the positioning of the label to a fixed position
            </summary>
            <param name="x">The x coordinate of the new label position</param>
            <param name="y">The y coordinate of the new label position</param>
            <returns>A label syntax element for chaining purposes</returns>
        </member>
        <member name="T:NMF.Glsp.Language.LabelDescriptor`1">
            <summary>
            Denotes a descriptor for elements shown as labels
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.LabelDescriptor`1.CalculateTypeHints">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Language.LabelDescriptor`1.Label(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.Boolean)">
            <summary>
            Specifies that a GLabel element should be created for the current element
            </summary>
            <param name="labelSelector">An expression calculating the text of the label</param>
            <param name="canEdit">True, if the label can be added, otherwise False</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="T:NMF.Glsp.Language.Layouting.LayoutStrategy">
            <summary>
            Denotes a layout strategy
            </summary>
        </member>
        <member name="P:NMF.Glsp.Language.Layouting.LayoutStrategy.Vbox">
            <summary>
            Gets the implementation of the Vbox layout strategy
            </summary>
        </member>
        <member name="P:NMF.Glsp.Language.Layouting.LayoutStrategy.Hbox">
            <summary>
            Gets the implementation of the Hbox layout strategy
            </summary>
        </member>
        <member name="P:NMF.Glsp.Language.Layouting.LayoutStrategy.FreeForm">
            <summary>
            Gets the implementation of the free form layout strategy
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.Layouting.LayoutStrategy.SetPosition(NMF.Glsp.Graph.GElement,NMF.Glsp.Protocol.Types.Point)">
            <summary>
            Sets the position for the given element
            </summary>
            <param name="element">The element</param>
            <param name="position">The position</param>
        </member>
        <member name="M:NMF.Glsp.Language.Layouting.LayoutStrategy.Update(NMF.Glsp.Graph.GElement)">
            <summary>
            Updates the layout for the given element
            </summary>
            <param name="element">the element</param>
        </member>
        <member name="M:NMF.Glsp.Language.Layouting.LayoutStrategy.Apply(NMF.Glsp.Graph.GElement)">
            <summary>
            Applies the layout for the given container
            </summary>
            <param name="container">The container element</param>
        </member>
        <member name="P:NMF.Glsp.Language.Layouting.LayoutStrategy.NeedsLayout">
            <summary>
            True, if the layout strategy needs automatic layout calculation, otherwise false
            </summary>
        </member>
        <member name="T:NMF.Glsp.Language.NodeDescriptor`1">
            <summary>
            Denotes the basic type to describe the appearance of elements as nodes
            </summary>
            <typeparam name="T">The semantic element type</typeparam>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.Size(System.Double,System.Double)">
            <summary>
            Sets the initial size of the node
            </summary>
            <param name="width">The width of the node in pixel</param>
            <param name="height">The height of the node in pixel</param>
            <remarks>This method is intended to be used to create a using block inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.Layout(NMF.Glsp.Language.Layouting.LayoutStrategy)">
            <summary>
            Sets the layout of this node
            </summary>
            <param name="layout"></param>
            <remarks>This method is intended to be used to create a using block inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.Compartment(System.String,NMF.Glsp.Language.Layouting.LayoutStrategy,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Creates a new compartment for the nodes represented by this semantic element
            </summary>
            <param name="type">The GElement type for the compartment</param>
            <param name="layoutStrategy">The layout strategy for the compartment or Vbox, if nothing is specified</param>
            <param name="guard">A predicate expression to control the creation of this compartment</param>
            <returns>A disposable that can be disposed to return to the parent element</returns>
            <remarks>This method is intended to be used to create a using block inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.Embed(NMF.Glsp.Language.NodeDescriptor{`0},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Embeds another rule into the current node descriptor
            </summary>
            <param name="innerDescriptor">The inner description</param>
            <param name="guard">A predicate expression to control the creation of this compartment</param>
            <remarks>This method is intended to be used to create a using block inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.Label(System.String,System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Specifies that a GLabel element should be created under the current node with a static text
            </summary>
            <param name="text">The text to display</param>
            <param name="type">The GElement type of the label</param>
            <param name="guard">An expression to guard the visibility of the label, or null</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.Label(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.Boolean,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Specifies that a GLabel element should be created under the current node
            </summary>
            <param name="labelSelector">An expression calculating the text of the label</param>
            <param name="type">The GElement type of the label</param>
            <param name="canEdit">True, if the label can be added, otherwise False</param>
            <param name="guard">An expression to guard the visibility of the label, or null</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.Nodes``1(NMF.Glsp.Language.NodeDescriptor{``0},System.Func{`0,NMF.Expressions.ICollectionExpression{``0}})">
            <summary>
            Specifies that nodes should be created as subnodes of the given descriptor
            </summary>
            <typeparam name="TOther">The semantic type of the dependent elements</typeparam>
            <param name="targetDescriptor">The node descriptor describing the sub-elements</param>
            <param name="selector">A function to obtain a collection of semantic elements</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.Labels``1(NMF.Glsp.Language.LabelDescriptor{``0},System.Func{`0,NMF.Expressions.ICollectionExpression{``0}},System.Boolean)">
            <summary>
            Specifies that labels should be created as subnodes of the given descriptor
            </summary>
            <typeparam name="TOther">The semantic type of the dependent elements</typeparam>
            <param name="targetDescriptor">The node descriptor describing the sub-elements</param>
            <param name="selector">A function to obtain a collection of semantic elements</param>
            <param name="includeInSelection">True, if the label elements should also be included in the selection, otherwise false</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.Edges``1(NMF.Glsp.Language.EdgeDescriptor{``0},System.Func{`0,NMF.Expressions.ICollectionExpression{``0}})">
            <summary>
            Specifies that the nodes should contain edges
            </summary>
            <typeparam name="TTransition">The semantic type of edges</typeparam>
            <param name="edgeDescriptor">A descriptor for the edges</param>
            <param name="selector">A function to calculate a collection of edges to create</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.Edges``2(NMF.Glsp.Language.EdgeDescriptor{``0,``1},System.Func{`0,NMF.Expressions.ICollectionExpression{System.ValueTuple{``0,``1}}})">
            <summary>
            Specifies that the nodes should contain edges
            </summary>
            <typeparam name="TSource">The semantic type of source nodes</typeparam>
            <typeparam name="TTarget">The semantic type of target nodes</typeparam>
            <param name="edgeDescriptor">A descriptor of edges from sources to the target</param>
            <param name="selector">A function to calculate pairs of source and target node</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.Edges``2(NMF.Glsp.Language.NodeDescriptor{``0},NMF.Glsp.Language.NodeDescriptor{``1},System.Func{`0,NMF.Expressions.ICollectionExpression{System.ValueTuple{``0,``1}}})">
            <summary>
            Specifies that the nodes should contain edges
            </summary>
            <typeparam name="TSource">The semantic type of source nodes</typeparam>
            <typeparam name="TTarget">The semantic type of target nodes</typeparam>
            <param name="sourceDescriptor">The descriptor for the source nodes</param>
            <param name="targetDescriptor">The descriptor for the target nodes</param>
            <param name="selector">A function to calculate pairs of source and target node</param>
            <remarks>This method is intended to be used inside of <see cref="M:NMF.Glsp.Language.DescriptorBase.DefineLayout" /></remarks>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.LayoutOptions(NMF.Glsp.Protocol.Layout.LayoutOptions)">
            <summary>
            Sets the layout options for this node
            </summary>
            <param name="layoutOptions">layout options</param>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.RoundCorners(NMF.Glsp.Protocol.Layout.RoundedCornerOptions)">
            <summary>
            Sets options for rounded corners
            </summary>
            <param name="roundedCornerOptions">Options for rounded corners</param>
        </member>
        <member name="P:NMF.Glsp.Language.NodeDescriptor`1.IsDeletable">
            <summary>
            Denotes whether this node can be deleted
            </summary>
        </member>
        <member name="P:NMF.Glsp.Language.NodeDescriptor`1.IsResizable">
            <summary>
            Denotes whether this node can be resized
            </summary>
        </member>
        <member name="M:NMF.Glsp.Language.NodeDescriptor`1.CalculateTypeHints">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Language.RouterKind">
            <summary>
            Denotes supported router kinds
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.RouterKind.None">
            <summary>
            Edge is not routed at all
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.RouterKind.Manhattan">
            <summary>
            Denotes that edges are routed using a manhattan style, i.e. in parallel to the axes
            </summary>
        </member>
        <member name="F:NMF.Glsp.Language.RouterKind.Bezier">
            <summary>
            Denotes that edges are routed using Bezier curves
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.Diagram">
            <summary>
            The default implementation of the Diagram class
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.Diagram._diagramType">
            <summary>
            The backing field for the DiagramType property
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.Diagram._elements">
            <summary>
            The backing field for the Elements property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Diagram.DiagramType">
            <summary>
            The diagramType property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Diagram.Elements">
            <summary>
            The elements property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Diagram.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Diagram.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Diagram.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.Diagram.DiagramTypeChanging">
            <summary>
            Gets fired before the DiagramType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.Diagram.DiagramTypeChanged">
            <summary>
            Gets fired when the DiagramType property changed its value
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.OnDiagramTypeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DiagramTypeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.OnDiagramTypeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the DiagramTypeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.ElementsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the Elements property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.ElementsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the Elements property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.Diagram.DiagramChildrenCollection">
            <summary>
            The collection class to to represent the children of the Diagram class
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramChildrenCollection.#ctor(NMF.Glsp.Notation.Diagram)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Diagram.DiagramChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Glsp.Notation.Diagram.DiagramReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Diagram class
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramReferencedElementsCollection.#ctor(NMF.Glsp.Notation.Diagram)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Diagram.DiagramReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Glsp.Notation.Diagram.DiagramTypeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the diagramType property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Diagram.DiagramTypeProxy.#ctor(NMF.Glsp.Notation.IDiagram)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Glsp.Notation.Diagram.DiagramTypeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.Edge">
            <summary>
            The default implementation of the Edge class
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.Edge._bendPoints">
            <summary>
            The backing field for the BendPoints property
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.Edge._source">
            <summary>
            The backing field for the Source property
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.Edge._target">
            <summary>
            The backing field for the Target property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.#ctor">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Edge.BendPoints">
            <summary>
            The bendPoints property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Edge.Source">
            <summary>
            The source property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Edge.Target">
            <summary>
            The target property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Edge.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Edge.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Edge.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.Edge.SourceChanging">
            <summary>
            Gets fired before the Source property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.Edge.SourceChanged">
            <summary>
            Gets fired when the Source property changed its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.Edge.TargetChanging">
            <summary>
            Gets fired before the Target property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.Edge.TargetChanged">
            <summary>
            Gets fired when the Target property changed its value
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.BendPointsCollectionChanging(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanging notifications for the BendPoints property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.BendPointsCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Forwards CollectionChanged notifications for the BendPoints property to the parent model element
            </summary>
            <param name="sender">The collection that raised the change</param>
            <param name="e">The original event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.OnSourceChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SourceChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.OnSourceChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SourceChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.OnResetSource(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Source property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.OnTargetChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the TargetChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.OnTargetChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the TargetChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.OnResetTarget(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Target property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.GetCollectionForFeature(System.String)">
            <summary>
            Gets the Model element collection for the given feature
            </summary>
            <returns>A non-generic list of elements</returns>
            <param name="feature">The requested feature</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.GetCompositionName(System.Object)">
            <summary>
            Gets the property name for the given container
            </summary>
            <returns>The name of the respective container reference</returns>
            <param name="container">The container object</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.Edge.EdgeChildrenCollection">
            <summary>
            The collection class to to represent the children of the Edge class
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeChildrenCollection.#ctor(NMF.Glsp.Notation.Edge)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Edge.EdgeChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Glsp.Notation.Edge.EdgeReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Edge class
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeReferencedElementsCollection.#ctor(NMF.Glsp.Notation.Edge)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Edge.EdgeReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.EdgeReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Glsp.Notation.Edge.SourceProxy">
            <summary>
            Represents a proxy to represent an incremental access to the source property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.SourceProxy.#ctor(NMF.Glsp.Notation.IEdge)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Glsp.Notation.Edge.SourceProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.Edge.TargetProxy">
            <summary>
            Represents a proxy to represent an incremental access to the target property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Edge.TargetProxy.#ctor(NMF.Glsp.Notation.IEdge)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Glsp.Notation.Edge.TargetProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.GDimension">
            <summary>
            The default implementation of the GDimension class
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.GDimension._width">
            <summary>
            The backing field for the Width property
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.GDimension._height">
            <summary>
            The backing field for the Height property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.GDimension.Width">
            <summary>
            The width property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.GDimension.Height">
            <summary>
            The height property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.GDimension.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.GDimension.WidthChanging">
            <summary>
            Gets fired before the Width property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.GDimension.WidthChanged">
            <summary>
            Gets fired when the Width property changed its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.GDimension.HeightChanging">
            <summary>
            Gets fired before the Height property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.GDimension.HeightChanged">
            <summary>
            Gets fired when the Height property changed its value
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.GDimension.OnWidthChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the WidthChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GDimension.OnWidthChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the WidthChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GDimension.OnHeightChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the HeightChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GDimension.OnHeightChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the HeightChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GDimension.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GDimension.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GDimension.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GDimension.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.GDimension.WidthProxy">
            <summary>
            Represents a proxy to represent an incremental access to the width property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.GDimension.WidthProxy.#ctor(NMF.Glsp.Notation.IGDimension)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Glsp.Notation.GDimension.WidthProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.GDimension.HeightProxy">
            <summary>
            Represents a proxy to represent an incremental access to the height property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.GDimension.HeightProxy.#ctor(NMF.Glsp.Notation.IGDimension)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Glsp.Notation.GDimension.HeightProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.GPoint">
            <summary>
            The default implementation of the GPoint class
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.GPoint._x">
            <summary>
            The backing field for the X property
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.GPoint._y">
            <summary>
            The backing field for the Y property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.GPoint.X">
            <summary>
            The x property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.GPoint.Y">
            <summary>
            The y property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.GPoint.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.GPoint.XChanging">
            <summary>
            Gets fired before the X property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.GPoint.XChanged">
            <summary>
            Gets fired when the X property changed its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.GPoint.YChanging">
            <summary>
            Gets fired before the Y property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.GPoint.YChanged">
            <summary>
            Gets fired when the Y property changed its value
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.GPoint.OnXChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the XChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GPoint.OnXChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the XChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GPoint.OnYChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the YChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GPoint.OnYChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the YChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GPoint.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GPoint.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GPoint.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Glsp.Notation.GPoint.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.GPoint.XProxy">
            <summary>
            Represents a proxy to represent an incremental access to the x property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.GPoint.XProxy.#ctor(NMF.Glsp.Notation.IGPoint)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Glsp.Notation.GPoint.XProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.GPoint.YProxy">
            <summary>
            Represents a proxy to represent an incremental access to the y property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.GPoint.YProxy.#ctor(NMF.Glsp.Notation.IGPoint)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Glsp.Notation.GPoint.YProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.IDiagram">
            <summary>
            The public interface for Diagram
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.IDiagram.DiagramType">
            <summary>
            The diagramType property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.IDiagram.Elements">
            <summary>
            The elements property
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IDiagram.DiagramTypeChanging">
            <summary>
            Gets fired before the DiagramType property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IDiagram.DiagramTypeChanged">
            <summary>
            Gets fired when the DiagramType property changed its value
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.IEdge">
            <summary>
            The public interface for Edge
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.IEdge.BendPoints">
            <summary>
            The bendPoints property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.IEdge.Source">
            <summary>
            The source property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.IEdge.Target">
            <summary>
            The target property
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IEdge.SourceChanging">
            <summary>
            Gets fired before the Source property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IEdge.SourceChanged">
            <summary>
            Gets fired when the Source property changed its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IEdge.TargetChanging">
            <summary>
            Gets fired before the Target property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IEdge.TargetChanged">
            <summary>
            Gets fired when the Target property changed its value
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.IGDimension">
            <summary>
            The public interface for GDimension
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.IGDimension.Width">
            <summary>
            The width property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.IGDimension.Height">
            <summary>
            The height property
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IGDimension.WidthChanging">
            <summary>
            Gets fired before the Width property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IGDimension.WidthChanged">
            <summary>
            Gets fired when the Width property changed its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IGDimension.HeightChanging">
            <summary>
            Gets fired before the Height property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IGDimension.HeightChanged">
            <summary>
            Gets fired when the Height property changed its value
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.IGPoint">
            <summary>
            The public interface for GPoint
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.IGPoint.X">
            <summary>
            The x property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.IGPoint.Y">
            <summary>
            The y property
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IGPoint.XChanging">
            <summary>
            Gets fired before the X property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IGPoint.XChanged">
            <summary>
            Gets fired when the X property changed its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IGPoint.YChanging">
            <summary>
            Gets fired before the Y property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IGPoint.YChanged">
            <summary>
            Gets fired when the Y property changed its value
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.INotationElement">
            <summary>
            The public interface for NotationElement
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.INotationElement.Id">
            <summary>
            The id property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.INotationElement.SemanticElement">
            <summary>
            The semanticElement property
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.INotationElement.IdChanging">
            <summary>
            Gets fired before the Id property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.INotationElement.IdChanged">
            <summary>
            Gets fired when the Id property changed its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.INotationElement.SemanticElementChanging">
            <summary>
            Gets fired before the SemanticElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.INotationElement.SemanticElementChanged">
            <summary>
            Gets fired when the SemanticElement property changed its value
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.IShape">
            <summary>
            The public interface for Shape
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.IShape.Position">
            <summary>
            The position property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.IShape.Size">
            <summary>
            The size property
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IShape.PositionChanging">
            <summary>
            Gets fired before the Position property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IShape.PositionChanged">
            <summary>
            Gets fired when the Position property changed its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IShape.SizeChanging">
            <summary>
            Gets fired before the Size property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.IShape.SizeChanged">
            <summary>
            Gets fired when the Size property changed its value
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.NotationElement">
            <summary>
            The default implementation of the NotationElement class
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.NotationElement._id">
            <summary>
            The backing field for the Id property
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.NotationElement._semanticElement">
            <summary>
            The backing field for the SemanticElement property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.NotationElement.Id">
            <summary>
            The id property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.NotationElement.SemanticElement">
            <summary>
            The semanticElement property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.NotationElement.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.NotationElement.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.NotationElement.IdChanging">
            <summary>
            Gets fired before the Id property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.NotationElement.IdChanged">
            <summary>
            Gets fired when the Id property changed its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.NotationElement.SemanticElementChanging">
            <summary>
            Gets fired before the SemanticElement property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.NotationElement.SemanticElementChanged">
            <summary>
            Gets fired when the SemanticElement property changed its value
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.OnIdChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IdChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.OnIdChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the IdChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.OnSemanticElementChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SemanticElementChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.OnSemanticElementChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SemanticElementChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.OnResetSemanticElement(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the SemanticElement property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.GetAttributeValue(System.String,System.Int32)">
            <summary>
            Resolves the given attribute name
            </summary>
            <returns>The attribute value or null if it could not be found</returns>
            <param name="attribute">The requested attribute name</param>
            <param name="index">The index of this attribute</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.GetExpressionForAttribute(System.String)">
            <summary>
            Gets the property expression for the given attribute
            </summary>
            <returns>An incremental property expression</returns>
            <param name="attribute">The requested attribute in upper case</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.NotationElement.NotationElementReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the NotationElement class
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.NotationElementReferencedElementsCollection.#ctor(NMF.Glsp.Notation.NotationElement)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.NotationElement.NotationElementReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.NotationElementReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.NotationElementReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.NotationElementReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.NotationElementReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.NotationElementReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.NotationElementReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.NotationElementReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.NotationElementReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Glsp.Notation.NotationElement.IdProxy">
            <summary>
            Represents a proxy to represent an incremental access to the id property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.IdProxy.#ctor(NMF.Glsp.Notation.INotationElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Glsp.Notation.NotationElement.IdProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.NotationElement.SemanticElementProxy">
            <summary>
            Represents a proxy to represent an incremental access to the semanticElement property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.NotationElement.SemanticElementProxy.#ctor(NMF.Glsp.Notation.INotationElement)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Glsp.Notation.NotationElement.SemanticElementProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.Shape">
            <summary>
            The default implementation of the Shape class
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.Shape._position">
            <summary>
            The backing field for the Position property
            </summary>
        </member>
        <member name="F:NMF.Glsp.Notation.Shape._size">
            <summary>
            The backing field for the Size property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Shape.Position">
            <summary>
            The position property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Shape.Size">
            <summary>
            The size property
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Shape.Children">
            <summary>
            Gets the child model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Shape.ReferencedElements">
            <summary>
            Gets the referenced model elements of this model element
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Shape.ClassInstance">
            <summary>
            Gets the Class model for this type
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.Shape.PositionChanging">
            <summary>
            Gets fired before the Position property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.Shape.PositionChanged">
            <summary>
            Gets fired when the Position property changed its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.Shape.SizeChanging">
            <summary>
            Gets fired before the Size property changes its value
            </summary>
        </member>
        <member name="E:NMF.Glsp.Notation.Shape.SizeChanged">
            <summary>
            Gets fired when the Size property changed its value
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.OnPositionChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the PositionChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.OnPositionChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the PositionChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.OnResetPosition(System.Object,System.EventArgs)">
            <summary>
            Handles the event that the Position property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.OnSizeChanging(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SizeChanging event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.OnSizeChanged(NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Raises the SizeChanged event
            </summary>
            <param name="eventArgs">The event data</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.OnResetSize(System.Object,NMF.Expressions.ValueChangedEventArgs)">
            <summary>
            Handles the event that the Size property must reset
            </summary>
            <param name="sender">The object that sent this reset request</param>
            <param name="eventArgs">The event data for the reset event</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.GetRelativePathForNonIdentifiedChild(NMF.Models.IModelElement)">
            <summary>
            Gets the relative URI fragment for the given child model element
            </summary>
            <returns>A fragment of the relative URI</returns>
            <param name="element">The element that should be looked for</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.GetModelElementForReference(System.String,System.Int32)">
            <summary>
            Resolves the given URI to a child model element
            </summary>
            <returns>The model element or null if it could not be found</returns>
            <param name="reference">The requested reference name</param>
            <param name="index">The index of this reference</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.SetFeature(System.String,System.Object)">
            <summary>
            Sets a value to the given feature
            </summary>
            <param name="feature">The requested feature</param>
            <param name="value">The value that should be set to that feature</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.GetExpressionForReference(System.String)">
            <summary>
            Gets the property expression for the given reference
            </summary>
            <returns>An incremental property expression</returns>
            <param name="reference">The requested reference in upper case</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.GetClass">
            <summary>
            Gets the Class for this model element
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.Shape.ShapeChildrenCollection">
            <summary>
            The collection class to to represent the children of the Shape class
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeChildrenCollection.#ctor(NMF.Glsp.Notation.Shape)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Shape.ShapeChildrenCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeChildrenCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeChildrenCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeChildrenCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeChildrenCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeChildrenCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeChildrenCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeChildrenCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeChildrenCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Glsp.Notation.Shape.ShapeReferencedElementsCollection">
            <summary>
            The collection class to to represent the children of the Shape class
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeReferencedElementsCollection.#ctor(NMF.Glsp.Notation.Shape)">
            <summary>
            Creates a new instance
            </summary>
        </member>
        <member name="P:NMF.Glsp.Notation.Shape.ShapeReferencedElementsCollection.Count">
            <summary>
            Gets the amount of elements contained in this collection
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeReferencedElementsCollection.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeReferencedElementsCollection.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeReferencedElementsCollection.Add(NMF.Models.IModelElement)">
            <summary>
            Adds the given element to the collection
            </summary>
            <param name="item">The item to add</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeReferencedElementsCollection.Clear">
            <summary>
            Clears the collection and resets all references that implement it.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeReferencedElementsCollection.Contains(NMF.Models.IModelElement)">
            <summary>
            Gets a value indicating whether the given element is contained in the collection
            </summary>
            <returns>True, if it is contained, otherwise False</returns>
            <param name="item">The item that should be looked out for</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeReferencedElementsCollection.CopyTo(NMF.Models.IModelElement[],System.Int32)">
            <summary>
            Copies the contents of the collection to the given array starting from the given array index
            </summary>
            <param name="array">The array in which the elements should be copied</param>
            <param name="arrayIndex">The starting index</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeReferencedElementsCollection.Remove(NMF.Models.IModelElement)">
            <summary>
            Removes the given item from the collection
            </summary>
            <returns>True, if the item was removed, otherwise False</returns>
            <param name="item">The item that should be removed</param>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.ShapeReferencedElementsCollection.GetEnumerator">
            <summary>
            Gets an enumerator that enumerates the collection
            </summary>
            <returns>A generic enumerator</returns>
        </member>
        <member name="T:NMF.Glsp.Notation.Shape.PositionProxy">
            <summary>
            Represents a proxy to represent an incremental access to the position property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.PositionProxy.#ctor(NMF.Glsp.Notation.IShape)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Glsp.Notation.Shape.PositionProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Glsp.Notation.Shape.SizeProxy">
            <summary>
            Represents a proxy to represent an incremental access to the size property
            </summary>
        </member>
        <member name="M:NMF.Glsp.Notation.Shape.SizeProxy.#ctor(NMF.Glsp.Notation.IShape)">
            <summary>
            Creates a new observable property access proxy
            </summary>
            <param name="modelElement">The model instance element for which to create the property access proxy</param>
        </member>
        <member name="P:NMF.Glsp.Notation.Shape.SizeProxy.Value">
            <summary>
            Gets or sets the value of this expression
            </summary>
        </member>
        <member name="T:NMF.Glsp.Processing.ISkeletonTrace">
            <summary>
            Denotes a trace for GLSP skeletons
            </summary>
        </member>
        <member name="M:NMF.Glsp.Processing.ISkeletonTrace.ResolveElement(System.Object,System.Object)">
            <summary>
            Finds the graphical element created for the given semantic element and the given skeleton
            </summary>
            <param name="element">the semantic element</param>
            <param name="skeleton">the skeleton</param>
            <returns>the graphical element or null, if it was not found</returns>
        </member>
        <member name="M:NMF.Glsp.Processing.ISkeletonTrace.Trace(System.Object,NMF.Glsp.Graph.GElement)">
            <summary>
            Traces the given combination of semantic element and graphical element
            </summary>
            <param name="element">the semantic element</param>
            <param name="gElement">the graphical element</param>
        </member>
        <member name="M:NMF.Glsp.Processing.ISkeletonTrace.RemoveElement(System.Object,System.Object)">
            <summary>
            Finds the graphical element created for the given semantic element and the given skeleton and removes it from the trace
            </summary>
            <param name="element">the semantic element</param>
            <param name="skeleton">the skeleton</param>
            <returns>the graphical element or null, if it was not found</returns>
        </member>
        <member name="T:NMF.Glsp.Processing.Layouting.AglLayoutService">
            <summary>
            Denotes the base class for a layout service using the AGL library
            </summary>
        </member>
        <member name="M:NMF.Glsp.Processing.Layouting.AglLayoutService.CalculateLayout(NMF.Glsp.Graph.GGraph)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Processing.Layouting.AglLayoutService.CalculateLayout(System.Collections.Generic.IEnumerable{NMF.Glsp.Graph.GElement})">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Processing.Layouting.AglLayoutService.ProcessLayout(Microsoft.Msagl.Core.Layout.GeometryGraph)">
            <summary>
            Processes the layout of the AGL graph
            </summary>
            <param name="g">the AGL graph</param>
        </member>
        <member name="T:NMF.Glsp.Processing.Layouting.LayeredLayoutService">
            <summary>
            Denotes a layered layout calculation
            </summary>
        </member>
        <member name="F:NMF.Glsp.Processing.Layouting.LayeredLayoutService.Instance">
            <summary>
            The default instance
            </summary>
        </member>
        <member name="M:NMF.Glsp.Processing.Layouting.LayeredLayoutService.ProcessLayout(Microsoft.Msagl.Core.Layout.GeometryGraph)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Glsp.Protocol.BaseProtocol.ActionMessage">
            <summary>
            A general message serves as an envelope carrying an action to be transmitted between the client and the server via a DiagramServer.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.ActionMessage.ClientId">
            <summary>
             Used to identify a specific client session.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.ActionMessage.Action">
            <summary>
             The action to execute.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.BaseProtocol.BaseAction">
            <summary>
            An action is a declarative description of a behavior that shall be invoked by the receiver 
            upon receipt of the action. It is a plain data structure, and as such transferable between 
            server and client. Actions contained in action messages are identified by their kind 
            attribute. This attribute is required for all actions. Certain actions are meant to be sent 
            from the client to the server or vice versa, while other actions can be sent both ways, by 
            the client or the server. All actions must extend the default action interface.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.BaseAction.Kind">
            <summary>
             Unique identifier specifying the kind of action to process.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.BaseProtocol.CompoundOperation">
            <summary>
             An operation that executes a list of operations.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.BaseProtocol.CompoundOperation.CompoundOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.CompoundOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.CompoundOperation.OperationList">
            <summary>
             List of operations that should be executed.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.BaseProtocol.CompoundOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.BaseProtocol.CustomOperation">
            <summary>
            Denotes a class for custom operations
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.BaseProtocol.CustomOperation.#ctor(System.String)">
            <summary>
            Creates a new custom operation with the given kind
            </summary>
            <param name="kind"></param>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.CustomOperation.Kind">
            <inheritdoc />
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.CustomOperation.ElementId">
            <summary>
            Gets or sets the element for which this operation was created
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.CustomOperation.Args">
            <summary>
            Custom arguments.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.BaseProtocol.CustomOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Glsp.Protocol.BaseProtocol.ExecutableAction">
            <summary>
            Denotes an action that can be executed
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.BaseProtocol.ExecutableAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <summary>
            Executes the action in the context of the given session
            </summary>
            <param name="session">The session in which to execute the action</param>
        </member>
        <member name="M:NMF.Glsp.Protocol.BaseProtocol.ExecutableAction.RequireTransaction">
            <summary>
            Denotes whether the execution of the action requires a transaction
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.BaseProtocol.Operation">
            <summary>
             Marker interface for operations.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.Operation.IsOperation">
            <summary>
             Discriminator property to make operations distinguishable from plain Actions.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.BaseProtocol.Operation.RequireTransaction">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.BaseProtocol.RejectAction">
            <summary>
            A reject action is a response fired to indicate that a request must be rejected.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.BaseProtocol.RejectAction.RejectActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.RejectAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.RejectAction.Message">
            <summary>
             A human-readable description of the reject reason. Typically this is an error message
             that has been thrown when handling the corresponding RequestAction.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.RejectAction.Detail">
            <summary>
             Optional additional details.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.BaseProtocol.RequestAction">
            <summary>
            A request action is tied to the expectation of receiving a corresponding response action. The requestId property 
            is used to match the received response with the original request.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.RequestAction.RequestId">
            <summary>
             Unique id for this request. In order to match a response to this request, the response needs to have the same id.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.BaseProtocol.ResponseAction">
            <summary>
            A response action is sent to respond to a request action. The responseId must match the requestId of the preceding 
            request. In case the responseId is empty or undefined, the action is handled as standalone, i.e. it was fired 
            without a preceding request.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.BaseProtocol.ResponseAction.ResponseId">
            <summary>
             Id corresponding to the request this action responds to.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Clipboard.CutOperation">
            <summary>
            Requests a cut operation from the server, i.e., deleting the selected elements from the model. 
            Before submitting a CutOperation a client should ensure that the cut elements are put into the clipboard.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Clipboard.CutOperation.CutOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Clipboard.CutOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Clipboard.CutOperation.EditorContext">
            <summary>
             The current editor context.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Clipboard.CutOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Clipboard.PasteOperation">
            <summary>
            Requests a paste operation from the server by providing the current clipboard data. Typically this means that elements 
            should be created based on the data in the clipboard.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Clipboard.PasteOperation.PasteOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Clipboard.PasteOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Clipboard.PasteOperation.ClipboardData">
            <summary>
             The clipboard data that should be pasted to the editor's last recorded mouse position (see `editorContext`).
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Clipboard.PasteOperation.EditorContext">
            <summary>
             The current editor context.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Clipboard.PasteOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Clipboard.RequestClipboardDataAction">
            <summary>
            Requests the clipboard data for the current editor context, i.e., the selected elements, in a clipboard-compatible format.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Clipboard.RequestClipboardDataAction.RequestClipboardDataActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Clipboard.RequestClipboardDataAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Clipboard.RequestClipboardDataAction.EditorContext">
            <summary>
             The current editor context.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Clipboard.RequestClipboardDataAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Clipboard.SetClipboardDataAction">
            <summary>
            Server response to a RequestClipboardDataAction containing the selected elements as clipboard-compatible format.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Clipboard.SetClipboardDataAction.SetClipboardDataActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Clipboard.SetClipboardDataAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Clipboard.SetClipboardDataAction.ClipboardData">
            <summary>
             The selected elements from the editor context as clipboard data.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Context.Contexts">
            <summary>
            Helper class to contain default context ids
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Context.Contexts.ContextMenu">
            <summary>
            Gets the id of the context menu
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Context.Contexts.CommandPalette">
            <summary>
            Gets the id of the command palette
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Context.Contexts.ToolPalette">
            <summary>
            Gets the id of the tool palette
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Context.RequestContextActions">
            <summary>
            The RequestContextActions is sent from the client to the server to request the available actions for the context with id contextId.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Context.RequestContextActions.RequestContextActionsKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.RequestContextActions.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.RequestContextActions.ContextId">
            <summary>
             The identifier for the context.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.RequestContextActions.EditorContext">
            <summary>
             The current editor context.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Context.RequestContextActions.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Context.SetContextActions">
            <summary>
            The SetContextActions is the response to a RequestContextActions containing all actions for the queried context.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Context.SetContextActions.SetContextActionsKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.SetContextActions.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.SetContextActions.Actions">
            <summary>
             The actions available in the queried context.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.SetContextActions.Args">
            <summary>
             Custom arguments.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Context.TriggerEdgeCreationAction">
            <summary>
            Triggers the enablement of the tool that is responsible for creating edges and initializes it with the creation of edges of the given elementTypeId.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Context.TriggerEdgeCreationAction.TriggerEdgeCreationActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.TriggerEdgeCreationAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.TriggerEdgeCreationAction.ElementTypeId">
            <summary>
             The type of edge that should be created by the edge creation tool.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.TriggerEdgeCreationAction.Args">
            <summary>
             Custom arguments.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Context.TriggerNodeCreationAction">
            <summary>
            Triggers the enablement of the tool that is responsible for creating nodes and initializes it with the creation of nodes of the given elementTypeId.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Context.TriggerNodeCreationAction.TriggerNodeCreationActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.TriggerNodeCreationAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.TriggerNodeCreationAction.ElementTypeId">
            <summary>
             The type of node that should be created by the node creation tool.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Context.TriggerNodeCreationAction.Args">
            <summary>
             Custom arguments.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Layout.CenterAction">
            <summary>
            Centers the viewport on the elements with the given identifiers. It changes the scroll setting of the viewport
            accordingly and resets the zoom to its default. This action can also be created on the client but it can also 
            be sent by the server in order to perform such a viewport change remotely.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Layout.CenterAction.CenterActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.CenterAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.CenterAction.ElementIds">
            <summary>
             The identifier of the elements on which the viewport should be centered.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.CenterAction.Animate">
            <summary>
             Indicate if the modification of the viewport should be realized with or without support of animations.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.CenterAction.RetainZoom">
            <summary>
             Indicates whether the zoom level should be kept.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Layout.ComputedBoundsAction">
            <summary>
            Sent from the client to the server to transmit the result of bounds computation as a response 
            to a RequestBoundsAction. If the server is responsible for parts of the layout, it can do so 
            after applying the computed bounds received with this action. Otherwise there is no need to 
            send the computed bounds to the server, so they can be processed locally by the client.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Layout.ComputedBoundsAction.ComputedBoundsActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.ComputedBoundsAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.ComputedBoundsAction.Bounds">
            <summary>
             The new bounds of the model elements.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.ComputedBoundsAction.Revision">
            <summary>
             The revision number.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.ComputedBoundsAction.Alignments">
            <summary>
             The new alignment of the model elements.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.ComputedBoundsAction.Routes">
            <summary>
             The route of the model elements.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Layout.ComputedBoundsAction.UpdateBounds(NMF.Glsp.Contracts.IGlspSession)">
            <summary>
            Updates bounds of elements as sent by the client
            </summary>
            <param name="session"></param>
        </member>
        <member name="T:NMF.Glsp.Protocol.Layout.FitToScreenAction">
            <summary>
            Triggers to fit all or a list of elements into the available drawing area. The resulting fit-to-screen command 
            changes the zoom and scroll settings of the viewport so the model can be shown completely. This action can also 
            be sent from the server to the client in order to perform such a viewport change programmatically.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Layout.FitToScreenAction.FitToScreenActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.FitToScreenAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.FitToScreenAction.ElementIds">
            <summary>
             The identifier of the elements to fit on screen.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.FitToScreenAction.Padding">
            <summary>
             The padding that should be visible on the viewport.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.FitToScreenAction.MaxZoom">
            <summary>
             The max zoom level authorized.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.FitToScreenAction.Animate">
            <summary>
             Indicate if the action should be performed with animation support or not.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Layout.LayoutOperation">
            <summary>
            Request a layout of the diagram or selected elements from the server.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Layout.LayoutOperation.LayoutOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.LayoutOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.LayoutOperation.ElementIds">
            <summary>
             The identifiers of the elements that should be layouted, will default to the root element if not defined.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Layout.LayoutOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Layout.LayoutOptions">
            <summary>
            Denotes layout options for nodes
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.LayoutOptions.PaddingRight">
            <summary>
            Determines the padding right
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.LayoutOptions.PrefWidth">
            <summary>
            Gets the preferred width
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.LayoutOptions.PrefHeight">
            <summary>
            Gets the preferred height
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Layout.RequestBoundsAction">
            <summary>
            Sent from the server to the client to request bounds for the given model. The model is rendered invisibly 
            so the bounds can derived from the DOM. The response is a ComputedBoundsAction. This hidden rendering 
            round-trip is necessary if the client is responsible for parts of the layout.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Layout.RequestBoundsAction.RequestBoundsActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.RequestBoundsAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.RequestBoundsAction.NewRoot">
            <summary>
             The model elements to consider to compute the new bounds.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Layout.RequestBoundsAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Layout.RoundedCornerOptions">
            <summary>
            Denotes layout options for the rounded corner view
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.RoundedCornerOptions.RadiusBottomLeft">
            <summary>
            Gets the radius for rounded corners in the bottom left corner
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.RoundedCornerOptions.RadiusTopLeft">
            <summary>
            Gets the radius for rounded corners in the top left corner
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.RoundedCornerOptions.RadiusTopRight">
            <summary>
            Gets the radius for rounded corners in the top right corner
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Layout.RoundedCornerOptions.RadiusBottomRight">
            <summary>
            Gets the radius for rounded corners in the bottom right corner
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Lifecycle.ClientState">
            <summary>
            Denotes the state of the client
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Lifecycle.ClientState.Initial">
            <summary>
             The client has been created.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Lifecycle.ClientState.Starting">
            <summary>
             `Start` has been called on the client and the start process is still on-going.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Lifecycle.ClientState.StartFailed">
            <summary>
             The client failed to complete the start process.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Lifecycle.ClientState.Running">
            <summary>
             The client was successfully started and is now running.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Lifecycle.ClientState.Stopping">
            <summary>
             `Stop` has been called on the client and the stop process is still on-going.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Lifecycle.ClientState.Stopped">
            <summary>
             The client stopped and disposed the server connection. Thus, action messages can no longer be sent.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Lifecycle.ClientState.ServerError">
            <summary>
             An error was encountered while connecting to the server. No action messages can be sent.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Lifecycle.InitializeResult">
            <summary>
            The initial server response after a client connected
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Lifecycle.InitializeResult.ProtocolVersion">
            <summary>
             GLSP protocol version that the server is implementing.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Lifecycle.InitializeResult.ServerActions">
            <summary>
             The actions (grouped by `diagramType`) that the server can handle.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.ModelData.ExportSvgAction">
            <summary>
            The client sends an ExportSvgAction to indicate that the diagram, which represents the current model state, 
            should be exported in SVG format. The action only provides the diagram SVG as plain string. The expected 
            result of executing an ExportSvgAction is a new file in SVG-format on the underlying filesystem. However, 
            other details like the target destination, concrete file name, file extension etc. are not specified in the 
            protocol. So it is the responsibility of the action handler to process this information accordingly and 
            export the result to the underlying filesystem.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.ModelData.ExportSvgAction.ExportSvgActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.ExportSvgAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.ExportSvgAction.Svg">
            <summary>
             The diagram GModel as serializable SVG.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.ModelData.ModelEditModes">
            <summary>
            Container for edit modes
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.ModelData.ModelEditModes.Readonly">
            <summary>
            Denotes that the user cannot make any changes to the semantic model
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.ModelData.ModelEditModes.Editable">
            <summary>
            Denotes that the user performs changes
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.ModelData.RequestExportSvgAction">
            <summary>
            A RequestExportSvgAction is sent by the client (or the server) to initiate the SVG export of the current diagram. 
            The handler of this action is expected to retrieve the diagram SVG and should send an ExportSvgAction as response.
            Typically the ExportSvgAction is handled directly on client side.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.ModelData.RequestExportSvgAction.RequestExportSvgActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.RequestExportSvgAction.Kind">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Glsp.Protocol.ModelData.RequestExportSvgAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.ModelData.RequestModelAction">
            <summary>
            Sent from the client to the server in order to request a graphical model. Usually this is the first message 
            that is sent from the client to the server, so it is also used to initiate the communication. The response 
            is a SetModelAction or an UpdateModelAction.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.ModelData.RequestModelAction.RequestModelActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.RequestModelAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.RequestModelAction.Options">
            <summary>
             Additional options used to compute the graphical model.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.ModelData.RequestModelAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.ModelData.SaveModelAction">
            <summary>
            Sent from the client to the server in order to persist the current model state back to the 
            source model. A new fileUri can be defined to save the model to a new destination different 
            from its original source model.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.ModelData.SaveModelAction.SaveModelActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.SaveModelAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.SaveModelAction.FileUri">
            <summary>
              The optional destination file uri.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.ModelData.SaveModelAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Glsp.Protocol.ModelData.SetDirtyAction">
            <summary>
            The server sends a SetDirtyStateAction to indicate to the client that the current model state on the server 
            does not correspond to the persisted model state of the source model. A client may ignore such an action or 
            use it to indicate to the user the dirty state.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.ModelData.SetDirtyAction.SetDirtyActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.SetDirtyAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.SetDirtyAction.IsDirty">
            <summary>
             True if the current model state is dirty
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.SetDirtyAction.Reason">
            <summary>
             A string indicating the reason for the dirty state change e.g 'operation', 'undo' ...
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.ModelData.SetEditModeAction">
            <summary>
            Sent from the client to the server to set the model into a specific editor mode, allowing the 
            server to react to certain requests differently depending on the mode. A client may also listen 
            to this action to prevent certain user interactions preemptively.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.ModelData.SetEditModeAction.SetEditModeActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.SetEditModeAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.SetEditModeAction.EditMode">
            <summary>
             The new edit mode of the diagram.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.ModelData.SetModelAction">
            <summary>
            ent from the server to the client in order to set the model. If a model is already present, it is replaced.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.ModelData.SetModelAction.SetModelActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.SetModelAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.SetModelAction.NewRoot">
            <summary>
             The new graphical model elements.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.ModelData.SourceModelChangedAction">
            <summary>
            Sent from the server to the client in order to indicate that the source model has changed. 
            The source model denotes the data source from which the diagram has been originally derived 
            (such as a file, a database, etc.). Typically clients would react to such an action by asking 
            the user whether she wants to reload the diagram or ignore the changes and continue editing. 
            If the editor has no changes (i.e. is not dirty), clients may also choose to directly refresh 
            the editor by sending a RequestModelAction.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.ModelData.SourceModelChangedAction.SourceModelChangedActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.SourceModelChangedAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.SourceModelChangedAction.SourceModelName">
            <summary>
             A human readable name of the source model (e.g. the file name).
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.ModelData.UpdateModelAction">
            <summary>
            Sent from the server to the client in order to update the model. If no model is present yet, this behaves 
            the same as a SetModelAction. The transition from the old model to the new one can be animated.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.ModelData.UpdateModelAction.UpdateModelActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.UpdateModelAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.UpdateModelAction.NewRoot">
            <summary>
             The new root element of the graphical model.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.ModelData.UpdateModelAction.Animate">
            <summary>
             Boolean flag to indicate wether updated/changed elements should be animated in the diagram.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Modification.ApplyLabelEditOperation">
            <summary>
            A very common use case in domain models is the support of labels that display textual information to the user. 
            For instance, the GGraph model has support for labels that can be attached to a node, edge, or port, and that 
            contain some text that is rendered in the view. To apply new text to such a label element the client may send 
            an ApplyLabelEditOperation to the server.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Modification.ApplyLabelEditOperation.ApplyLabelEditOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ApplyLabelEditOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ApplyLabelEditOperation.LabelId">
            <summary>
             Identifier of the label model element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ApplyLabelEditOperation.Text">
            <summary>
             Text that should be applied on the label.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Modification.ApplyLabelEditOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Modification.ChangeBoundsOperation">
            <summary>
            Triggers the position or size change of elements. This action concerns only the element’s graphical size 
            and position. Whether an element can be resized or repositioned may be specified by the server with a 
            TypeHint to allow for immediate user feedback before resizing or repositioning.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Modification.ChangeBoundsOperation.ChangeBoundsOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ChangeBoundsOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ChangeBoundsOperation.NewBounds">
            <summary>
             The new bounds of the respective elements.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Modification.ChangeBoundsOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Modification.ChangeContainerOperation">
            <summary>
            The client sends a ChangeContainerOperation to the server to request the execution of a changeContainer operation.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Modification.ChangeContainerOperation.ChangeContainerOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ChangeContainerOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ChangeContainerOperation.ElementId">
            <summary>
             The element to be changed.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ChangeContainerOperation.TargetContainerId">
            <summary>
             The element container of the changeContainer operation.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ChangeContainerOperation.Location">
            <summary>
             The graphical location.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Modification.ChangeContainerOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Modification.ChangeRoutingPointsOperation">
            <summary>
            An edge may have zero or more routing points that “re-direct” the edge between the source and the target element.
            In order to set these routing points the client may send a ChangeRoutingPointsOperation.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Modification.ChangeRoutingPointsOperation.ChangeRoutingPointsOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ChangeRoutingPointsOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ChangeRoutingPointsOperation.NewRoutingPoints">
            <summary>
             The routing points of the edge (may be empty).
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Modification.ChangeRoutingPointsOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Modification.CreateEdgeOperation">
            <summary>
            In order to create an edge in the model the client can send a CreateEdgeOperation with the necessary information to create that edge.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Modification.CreateEdgeOperation.CreateEdgeOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.CreateEdgeOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.CreateEdgeOperation.SourceElementId">
            <summary>
             The source element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.CreateEdgeOperation.TargetElementId">
            <summary>
             The target element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.CreateEdgeOperation.ElementTypeId">
            <summary>
             The type of edge that should be created by the edge creation tool.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.CreateEdgeOperation.Args">
            <summary>
             Custom arguments.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Modification.CreateEdgeOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Modification.CreateNodeOperation">
            <summary>
            In order to create a node in the model the client can send a CreateNodeOperation with the necessary information to create that node.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Modification.CreateNodeOperation.CreateNodeOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.CreateNodeOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.CreateNodeOperation.Location">
            <summary> 
             The location at which the operation shall be executed.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.CreateNodeOperation.ContainerId">
            <summary>
             The container in which the operation shall be executed.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.CreateNodeOperation.ElementTypeId">
            <summary>
             The type of edge that should be created by the edge creation tool.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.CreateNodeOperation.Args">
            <summary>
             Custom arguments.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Modification.CreateNodeOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Modification.DeleteElementOperation">
            <summary>
            The client sends a DeleteElementOperation to the server to request the deletion of an element from the model.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Modification.DeleteElementOperation.DeleteElementOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.DeleteElementOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.DeleteElementOperation.ElementIds">
            <summary>
             The elements to be deleted.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Modification.DeleteElementOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Modification.ReconnectEdgeOperation">
            <summary>
            If the source and/or target element of an edge should be adapted, the client can send a ReconnectEdgeOperation to the server.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Modification.ReconnectEdgeOperation.ReconnectEdgeOperationKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ReconnectEdgeOperation.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ReconnectEdgeOperation.EdgeElementId">
            <summary>
             The edge element that should be reconnected.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ReconnectEdgeOperation.SourceElementId">
            <summary>
             The (new) source element of the edge.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ReconnectEdgeOperation.TargetElementId">
            <summary>
             The (new) target element of the edge.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Modification.ReconnectEdgeOperation.Args">
            <summary>
             Additional arguments for custom behavior.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Modification.ReconnectEdgeOperation.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Navigation.NavigateToExternalTargetAction">
            <summary>
            If a navigation target cannot be resolved or the resolved target is something that is not part of our source 
            model, e.g., a separate documentation file, a NavigateToExternalTargetAction may be sent. Since the target 
            it outside of the model scope such an action would be typically handled by an integration layer (such as 
            the surrounding IDE).
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Navigation.NavigateToExternalTargetAction.NavigateToExternalTargetActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.NavigateToExternalTargetAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.NavigateToExternalTargetAction.NavigationTarget">
            <summary>
             The target to which we navigate.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Navigation.NavigateToTargetAction">
            <summary>
            Action that triggers the navigation to a particular navigation target. This may be used by the client internally or 
            may be sent from the server.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Navigation.NavigateToTargetAction.NavigateToTargetActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.NavigateToTargetAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.NavigateToTargetAction.Target">
            <summary>
             The target to which we navigate.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Navigation.NavigationTarget">
            <summary>
            A NavigationTarget identifies the object we want to navigate to via its uri and may further provide a label to display 
            for the client. Additionally, generic arguments may be used to to encode any domain- or navigation type-specific information.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.NavigationTarget.Uri">
            <summary>
             URI to identify the object we want to navigate to.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.NavigationTarget.Label">
            <summary>
             Optional label to display to the user.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.NavigationTarget.Args">
            <summary>
             Domain-specific arguments that may be interpreted directly or resolved further.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Navigation.RequestNavigationTargetsAction">
            <summary>
            Action that is usually sent from the client to the server to request navigation targets for a specific navigation 
            type such as documentation or implementation in the given editor context.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Navigation.RequestNavigationTargetsAction.RequestNavigationTargetsActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.RequestNavigationTargetsAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.RequestNavigationTargetsAction.TargetTypeId">
            <summary>
             Identifier of the type of navigation targets we want to retrieve, e.g., 'documentation', 'implementation', etc.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.RequestNavigationTargetsAction.EditorContext">
            <summary>
             The current editor context.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Navigation.RequestNavigationTargetsAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Navigation.ResolveNavigationTargetAction">
            <summary>
            If a client cannot navigate to a target directly, a ResolveNavigationTargetAction may be sent to the server 
            to resolve the navigation target to one or more model elements. This may be useful in cases where the 
            resolution of each target is expensive or the client architecture requires an indirection.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Navigation.ResolveNavigationTargetAction.ResolveNavigationTargetActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.ResolveNavigationTargetAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.ResolveNavigationTargetAction.NavigationTarget">
            <summary>
             The navigation target to resolve.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Navigation.ResolveNavigationTargetAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Navigation.SetNavigationTargetsAction">
            <summary>
            Response action from the server following a RequestNavigationTargetsAction. It contains all available navigation targets 
            for the queried target type in the provided editor context. The server may also provide additional information using the 
            arguments, e.g., warnings, that can be interpreted by the client.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Navigation.SetNavigationTargetsAction.SetNavigationTargetsActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.SetNavigationTargetsAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.SetNavigationTargetsAction.Targets">
            <summary>
             A list of navigation targets.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.SetNavigationTargetsAction.Args">
            <summary>
             Custom arguments that may be interpreted by the client.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Navigation.SetResolvedNavigationTargetAction">
            <summary>
            An action sent from the server in response to a ResolveNavigationTargetAction. The response contains the 
            resolved element ids for the given target and may contain additional information in the args property.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Navigation.SetResolvedNavigationTargetAction.SetResolvedNavigationTargetActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.SetResolvedNavigationTargetAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.SetResolvedNavigationTargetAction.ElementIds">
            <summary>
             The element ids of the resolved navigation target.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Navigation.SetResolvedNavigationTargetAction.Args">
            <summary>
             Custom arguments that may be interpreted by the client.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Notification.EndProgressAction">
            <summary>
            This action is sent by the server to the client to end the reporting of a progress.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Notification.EndProgressAction.EndProgressActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.EndProgressAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.EndProgressAction.ProgressId">
            <summary>
             The ID of the progress reporting to update.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.EndProgressAction.Message">
            <summary>
             The message to show in the progress reporting.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Notification.MessageAction">
            <summary>
            This action is typically sent by the server (or the client) to notify the user about something of interest.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Notification.MessageAction.MessageActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.MessageAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.MessageAction.Severity">
            <summary>
             The severity of the message.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.MessageAction.Message">
            <summary>
             The message text.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.MessageAction.Details">
            <summary>
             Further details on the message.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Notification.SeverityLevels">
            <summary>
            The severity of a status or message.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Notification.SeverityLevels.None">
            <summary>
            Severity level NONE
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Notification.SeverityLevels.Info">
            <summary>
            Severity level INFO
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Notification.SeverityLevels.Warning">
            <summary>
            Severity level WARNING
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Notification.SeverityLevels.Error">
            <summary>
            Severity level ERROR
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Notification.SeverityLevels.Fatal">
            <summary>
            Severity level FATAL
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Notification.SeverityLevels.Ok">
            <summary>
            Severity level OK
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Notification.StartProgressAction">
            <summary>
            This action is sent by the server to the client to request presenting the progress of a long running process in the UI.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Notification.StartProgressAction.StartProgressActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.StartProgressAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.StartProgressAction.ProgressId">
            <summary>
             An ID that can be used in subsequent `updateProgress` and `endProgress` events to make them refer to the same progress reporting.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.StartProgressAction.Title">
            <summary>
             Short title of the progress reporting. Shown in the UI to describe the long running process.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.StartProgressAction.Message">
            <summary>
             Optional additional progress message. Shown in the UI to describe the long running process.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.StartProgressAction.Percentage">
            <summary>
             Progress percentage to display (value range: 0 to 100). If omitted no percentage is shown.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Notification.StatusAction">
            <summary>
            This action is typically sent by the server (or the client) to signal a state change. If a timeout is given the 
            respective status should disappear after the timeout is reached.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Notification.StatusAction.StatusActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.StatusAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.StatusAction.Severity">
            <summary>
             The severity of the status.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.StatusAction.Message">
            <summary>
             The message describing the status.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.StatusAction.Timeout">
            <summary>
             Timeout after which a displayed status disappears.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Notification.UpdateProgressAction">
            <summary>
            This action is sent by the server to the client to presenting an update of the progress of a long running process in the UI.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Notification.UpdateProgressAction.UpdateProgressActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.UpdateProgressAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.UpdateProgressAction.ProgressId">
            <summary>
             The ID of the progress reporting to update.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.UpdateProgressAction.Message">
            <summary>
             The message to show in the progress reporting.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Notification.UpdateProgressAction.Percentage">
            <summary>
             The percentage (value range: 0 to 100) to show in the progress reporting.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Selection.RequestPopupModelAction">
            <summary>
            Triggered when the user hovers the mouse pointer over an element to get a popup with details on that element. 
            This action is sent from the client to the server. The response is a SetPopupModelAction.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Selection.RequestPopupModelAction.RequestPopupModelActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Selection.RequestPopupModelAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Selection.RequestPopupModelAction.ElementId">
            <summary>
            The identifier of the elements for which a popup is requested.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Selection.RequestPopupModelAction.Bounds">
            <summary>
            The bounds.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Selection.RequestPopupModelAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Glsp.Protocol.Selection.SelectAction">
            <summary>
            Triggered when the user changes the selection, e.g. by clicking on a selectable element. The action should trigger 
            a change in the selected state accordingly, so the elements can be rendered differently. The server can send such 
            an action to the client in order to change the selection remotely.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Selection.SelectAction.SelectActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Selection.SelectAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Selection.SelectAction.SelectedElementsIDs">
            <summary>
             The identifier of the elements to mark as selected.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Selection.SelectAction.DeselectedElementsIDs">
            <summary>
             The identifier of the elements to mark as not selected.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Selection.SelectAction.DeselectAll">
            <summary>
             Whether all currently selected elements should be deselected.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Selection.SelectAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Glsp.Protocol.Selection.SelectAllAction">
            <summary>
            Used for selecting or deselecting all elements.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Selection.SelectAllAction.SelectAllActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Selection.SelectAllAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Selection.SelectAllAction.Select">
            <summary>
             If `select` is true, all elements are selected, otherwise they are deselected.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Selection.SetPopupModelAction">
            <summary>
            Sent from the server to the client to display a popup in response to a RequestPopupModelAction. This action 
            can also be used to remove any existing popup by choosing EMPTY_ROOT as root element.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Selection.SetPopupModelAction.SetPopupModelActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Selection.SetPopupModelAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Selection.SetPopupModelAction.NewRoot">
            <summary>
            The model elements composing the popup to display.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.Bounds">
            <summary>
            The bounds are the position (x, y) and dimension (width, height) of an object. As such the Bounds type extends both Point and Dimension.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.Bounds.Width">
            <summary>
             The width of an element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.Bounds.Height">
            <summary>
             the height of an element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.Bounds.X">
            <summary>
             The abscissa of the point.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.Bounds.Y">
            <summary>
             The ordinate of the point.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.CheckEdgeResultAction">
            <summary>
            Sent from the server to the client as a response for a {@link RequestCheckEdgeAction}. It provides a boolean 
            indicating whether the edge context information provided by the corresponding request action is valid i.e. 
            creation of an edge with the given edge type and source/target element is allowed.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Types.CheckEdgeResultAction.CheckEdgeResultActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.CheckEdgeResultAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.CheckEdgeResultAction.IsValid">
            <summary>
             true if the selected element is a valid target for this edge,
             false otherwise.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.CheckEdgeResultAction.EdgeType">
            <summary>
             The element type of the edge that has been checked.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.CheckEdgeResultAction.SourceElementId">
            <summary>
             The ID of the source element of the edge that has been checked.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.CheckEdgeResultAction.TargetElementId">
            <summary>
             The ID of the target element of the edge that has been checked.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.Dimension">
            <summary>
            The Dimension of an object is composed of its width and height.
            </summary>
            <param name="Width">  The width of an element. </param>
            <param name="Height">  the height of an element. </param>
        </member>
        <member name="M:NMF.Glsp.Protocol.Types.Dimension.#ctor(System.Double,System.Double)">
            <summary>
            The Dimension of an object is composed of its width and height.
            </summary>
            <param name="Width">  The width of an element. </param>
            <param name="Height">  the height of an element. </param>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.Dimension.Width">
            <summary>  The width of an element. </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.Dimension.Height">
            <summary>  the height of an element. </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.EdgeLabelPlacement">
            <summary>
            Denotes the placement of a label relative to an edge
            </summary>
            <param name="Position">The position of the edge</param>
            <param name="Rotate">A boolean value indicating whether the label should be rotated</param>
            <param name="Side">The side of the edge</param>
            <param name="MoveMode">The way the label can be moved</param>
            <param name="Offset">An offset to the next node or edge</param>
        </member>
        <member name="M:NMF.Glsp.Protocol.Types.EdgeLabelPlacement.#ctor(System.Double,System.Boolean,System.String,System.String,System.Nullable{System.Double})">
            <summary>
            Denotes the placement of a label relative to an edge
            </summary>
            <param name="Position">The position of the edge</param>
            <param name="Rotate">A boolean value indicating whether the label should be rotated</param>
            <param name="Side">The side of the edge</param>
            <param name="MoveMode">The way the label can be moved</param>
            <param name="Offset">An offset to the next node or edge</param>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EdgeLabelPlacement.Position">
            <summary>The position of the edge</summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EdgeLabelPlacement.Rotate">
            <summary>A boolean value indicating whether the label should be rotated</summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EdgeLabelPlacement.Side">
            <summary>The side of the edge</summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EdgeLabelPlacement.MoveMode">
            <summary>The way the label can be moved</summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EdgeLabelPlacement.Offset">
            <summary>An offset to the next node or edge</summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.EdgeTypeHint">
            <summary>
            Type hints for edges
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EdgeTypeHint.Routable">
            <summary>
             Specifies whether the routing points of the edge can be changed
             i.e. edited by the user.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EdgeTypeHint.SourceElementTypeIds">
            <summary>
             Allowed source element types for this edge type
             If not defined unknown element can be used as source element for this edge.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EdgeTypeHint.TargetElementTypeIds">
            <summary>
             Allowed targe element types for this edge type
             If not defined unknown element can be used as target element for this edge.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EdgeTypeHint.Dynamic">
            <summary>
             Indicates whether this type hint is dynamic or not. Dynamic edge type hints
             require an additional runtime check before creating an edge, when checking
             source and target element types is not sufficient.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.EditorContext">
            <summary>
            The EditorContext may be used to represent the current state of the editor for particular actions. 
            It encompasses the last recorded mouse position, the list of selected elements, and may contain 
            custom arguments to encode additional state information.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EditorContext.SelectedElementIds">
            <summary>
             The list of selected element identifiers.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EditorContext.LastMousePosition">
            <summary>
             The last recorded mouse position.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.EditorContext.Args">
            <summary>
             Custom arguments.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.ElementAndAlignment">
            <summary>
            The ElementAndAlignment type is used to associate a new alignment with a model element, which is referenced via its id.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.ElementAndAlignment.ElementId">
            <summary>
             The identifier of an element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.ElementAndAlignment.NewAlignment">
            <summary>
             The new alignment of the element.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.ElementAndBounds">
            <summary>
            The ElementAndBounds type is used to associate new bounds with a model element, which is referenced via its id.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.ElementAndBounds.ElementId">
            <summary>
             The identifier of the element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.ElementAndBounds.NewSize">
            <summary>
             The new size of the element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.ElementAndBounds.NewPosition">
            <summary>
             The new position of the element.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.ElementAndRoutingPoints">
            <summary>
            The ElementAndRoutingPoints type is used to associate an edge with specific routing points.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.ElementAndRoutingPoints.ElementId">
            <summary>
             The identifier of an element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.ElementAndRoutingPoints.NewRoutingPoints">
            <summary>
             The new list of routing points.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.LabeledAction">
            <summary>
            Labeled actions are used to denote a group of actions in a user-interface context, 
            e.g., to define an entry in the command palette or in the context menu.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.LabeledAction.Label">
            <summary>
             Group label.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.LabeledAction.Actions">
            <summary>
             Actions in the group.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.LabeledAction.Children">
            <summary>
            Gets or sets the child actions
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.LabeledAction.SortString">
            <summary>
            A string used for sorting purposes
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.LabeledAction.Icon">
            <summary>
             Optional group icon.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.Point">
            <summary>
            A Point is composed of the (x,y) coordinates of an object.
            </summary>
            <param name="X">  The abscissa of the point. </param>
            <param name="Y">  The ordinate of the point. </param>
        </member>
        <member name="M:NMF.Glsp.Protocol.Types.Point.#ctor(System.Double,System.Double)">
            <summary>
            A Point is composed of the (x,y) coordinates of an object.
            </summary>
            <param name="X">  The abscissa of the point. </param>
            <param name="Y">  The ordinate of the point. </param>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.Point.X">
            <summary>  The abscissa of the point. </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.Point.Y">
            <summary>  The ordinate of the point. </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.RequestCheckEdgeAction">
            <summary>
            Sent from the client to the server to check wether the provided edge context information is valid i.e. creation
            of an edge with the given edge type and source/target element is allowed by the server. Typically this action 
            is dispatched by edge creation tools in the creation phase of an edge that’s associated with a dynamic EdgeTypeHint.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Types.RequestCheckEdgeAction.RequestCheckEdgeActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.RequestCheckEdgeAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.RequestCheckEdgeAction.EdgeType">
            <summary>
             The element type of the edge being created.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.RequestCheckEdgeAction.SourceElementId">
            <summary>
             The ID of the edge source element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.RequestCheckEdgeAction.TargetElementId">
            <summary>
             The ID of the edge target element to check.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Types.RequestCheckEdgeAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.RequestTypeHintsAction">
            <summary>
            Sent from the client to the server in order to request hints on whether certain modifications are allowed 
            for a specific element type. The RequestTypeHintsAction is optional, but should usually be among the first 
            messages sent from the client to the server after receiving the model via RequestModelAction. The response 
            is a SetTypeHintsAction.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Types.RequestTypeHintsAction.RequestTypeHintsActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.RequestTypeHintsAction.Kind">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Glsp.Protocol.Types.RequestTypeHintsAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.SetTypeHintsAction">
            <summary>
            Sent from the server to the client in order to provide hints certain modifications are allowed for a specific element type.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Types.SetTypeHintsAction.SetTypeHintsActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.SetTypeHintsAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.SetTypeHintsAction.ShapeHints">
            <summary>
             The hints for shape types.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.SetTypeHintsAction.EdgeHints">
            <summary>
             The hints for edge types.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.ShapeTypeHint">
            <summary>
            Type hints for shapes
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.ShapeTypeHint.Resizable">
            <summary>
             Specifies whether the element can be resized.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.ShapeTypeHint.Reparentable">
            <summary>
             Specifies whether the element can be moved to another parent
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.ShapeTypeHint.ContainableElementTypeIds">
            <summary>
             The types of elements that can be contained by this element (if any)
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Types.TypeHint">
            <summary>
            Type hints are used to define what modifications are supported on the different element types. Conceptually 
            type hints are similar to features of a model elements but define the functionality on a type level. The 
            rationale is to avoid a client-server round-trip for user feedback of each synchronous user interaction.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.TypeHint.ElementTypeId">
            <summary>
             The identifier of an element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.TypeHint.Repositionable">
            <summary>
             Specifies whether the element can be relocated.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Types.TypeHint.Deletable">
            <summary>
             Specifies whether the element can be deleted
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.UndoRedo.RedoAction">
            <summary>
            Trigger a redo of the latest undone command.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.UndoRedo.RedoAction.RedoActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.UndoRedo.RedoAction.Kind">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Glsp.Protocol.UndoRedo.RedoAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.UndoRedo.UndoAction">
            <summary>
            Trigger an undo of the latest executed command.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.UndoRedo.UndoAction.UndoActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.UndoRedo.UndoAction.Kind">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Glsp.Protocol.UndoRedo.UndoAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Glsp.Protocol.Validation.DeleteMarkersAction">
            <summary>
            To remove markers for elements a client or server may send a DeleteMarkersAction with all markers that should be removed.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Validation.DeleteMarkersAction.DeleteMarkersActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.DeleteMarkersAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.DeleteMarkersAction.Markers">
            <summary>
             The list of markers that should be deleted.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Validation.Marker">
            <summary>
            A marker represents the validation result for a single model element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.Marker.Label">
            <summary>
             Short label describing this marker message, e.g., short validation message
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.Marker.Description">
            <summary>
             Full description of this marker, e.g., full validation message
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.Marker.ElementId">
            <summary>
             Id of the model element this marker refers to
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.Marker.Kind">
            <summary>
             Marker kind, e.g., info, warning, error or custom kind
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Validation.RequestEditValidationAction">
            <summary>
            Requests the validation of the given text in the context of the provided model element. Typically sent from the client to the server.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Validation.RequestEditValidationAction.RequestEditValidationActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.RequestEditValidationAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.RequestEditValidationAction.ContextId">
            <summary>
             Context in which the text is validated, e.g., 'label-edit'.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.RequestEditValidationAction.ModelElementId">
            <summary>
             Model element that is being edited.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.RequestEditValidationAction.Text">
            <summary>
             Text that should be considered for the model element.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Validation.RequestEditValidationAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Validation.RequestMarkersAction">
            <summary>
            Action to retrieve markers for the specified model elements. Sent from the client to the server.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Validation.RequestMarkersAction.RequestMarkersActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.RequestMarkersAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.RequestMarkersAction.ElementsIDs">
            <summary>
             The elements for which markers are requested, may be just the root element.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.RequestMarkersAction.Reason">
            <summary>
             The reason for this request, e.g. a `batch` validation or a `live` validation.
            </summary>
        </member>
        <member name="M:NMF.Glsp.Protocol.Validation.RequestMarkersAction.ExecuteAsync(NMF.Glsp.Contracts.IGlspSession)">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Protocol.Validation.ResponseError">
            <summary>
            A validation error
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.ResponseError.Code">
            <summary>
             Code identifying the error kind.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.ResponseError.Message">
            <summary>
             Error message.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.ResponseError.Data">
            <summary>
             Additional custom data, e.g., a serialized stacktrace.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Validation.SetEditValidationResultAction">
            <summary>
            Response to a RequestEditValidationAction containing the validation result for applying a text on a certain model element.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Validation.SetEditValidationResultAction.SetEditValidationResultActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.SetEditValidationResultAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.SetEditValidationResultAction.Status">
            <summary>
             Validation status.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.SetEditValidationResultAction.Args">
            <summary> 
            Additional arguments for custom behavior.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Validation.SetMarkersAction">
            <summary>
            Response to the RequestMarkersAction containing all validation markers. Sent from the server to the client. 
            This action always sends the entire list of markers. Thus, clients can replace all markers for a specific 
            reason with the new ones that have been sent with the same reason.
            </summary>
        </member>
        <member name="F:NMF.Glsp.Protocol.Validation.SetMarkersAction.SetMarkersActionKind">
            <summary>
            The kind value used for this kind of action
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.SetMarkersAction.Kind">
            <inheritdoc/>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.SetMarkersAction.Markers">
            <summary>
             The list of markers to be set in the diagram editor.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.SetMarkersAction.Reason">
            <summary>
             The reason for this response, e.g. a `batch` validation or a `live` validation.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Protocol.Validation.ValidationStatus">
            <summary>
            Denotes the validation status for editing text
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.ValidationStatus.Severity">
            <summary>
             The severity of the validation returned by the server.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.ValidationStatus.Message">
            <summary>
             The validation status message which may be rendered in the view.
            </summary>
        </member>
        <member name="P:NMF.Glsp.Protocol.Validation.ValidationStatus.Error">
            <summary>
             A potential error that encodes more details.
            </summary>
        </member>
        <member name="T:NMF.Glsp.Server.BaseActionConverter">
            <summary>
            Denotes a class that can convert actions to JSON
            </summary>
        </member>
        <member name="M:NMF.Glsp.Server.BaseActionConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Server.BaseActionConverter.Write(System.Text.Json.Utf8JsonWriter,NMF.Glsp.Protocol.BaseProtocol.BaseAction,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Glsp.Server.GlspJsonRpcServerUtil">
            <summary>
            Helper class to configure Stream JSON RPC for the usage with the GLSP implementation
            </summary>
        </member>
        <member name="M:NMF.Glsp.Server.GlspJsonRpcServerUtil.CreateServer(System.Net.WebSockets.WebSocket,NMF.Glsp.Contracts.IGlspServer)">
            <summary>
            Creates a StreamJSON RPC object for the given transport
            </summary>
            <param name="webSocket">The websocket connection</param>
            <param name="server">The server implementation</param>
            <returns>A JSON RPC object that manages the connection to the client</returns>
        </member>
        <member name="M:NMF.Glsp.Server.GlspJsonRpcServerUtil.CreateServer(System.IO.Pipelines.IDuplexPipe,NMF.Glsp.Contracts.IGlspServer)">
            <summary>
            Creates a StreamJSON RPC object for the given transport
            </summary>
            <param name="pipe">The pipe used for the connection</param>
            <param name="server">The server implementation</param>
            <returns>A JSON RPC object that manages the connection to the client</returns>
        </member>
        <member name="M:NMF.Glsp.Server.GlspJsonRpcServerUtil.CreateServer(System.IO.Stream,NMF.Glsp.Contracts.IGlspServer)">
            <summary>
            Creates a StreamJSON RPC object for the given transport
            </summary>
            <param name="stream">The stream that represents the connection with the client</param>
            <param name="server">The server implementation</param>
            <returns>A JSON RPC object that manages the connection to the client</returns>
        </member>
        <member name="T:NMF.Glsp.Server.GlspServer">
            <summary>
            Denotes the default implementation of a GLSP server
            </summary>
        </member>
        <member name="E:NMF.Glsp.Server.GlspServer.Process">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Server.GlspServer.#ctor(NMF.Models.Services.IModelServer,NMF.Glsp.Contracts.IClientSessionProvider[])">
            <summary>
            Creates a new instance
            </summary>
            <param name="modelServer">the model server that should be used to serve requests</param>
            <param name="sessionProviders">A collection of session providers</param>
        </member>
        <member name="M:NMF.Glsp.Server.GlspServer.#ctor(NMF.Models.Services.IModelServer,System.Collections.Generic.IEnumerable{NMF.Glsp.Contracts.IClientSessionProvider})">
            <summary>
            Creates a new instance
            </summary>
            <param name="modelServer">the model server that should be used to serve requests</param>
            <param name="sessionProviders">A collection of session providers</param>
        </member>
        <member name="M:NMF.Glsp.Server.GlspServer.DisposeClientSessionAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Glsp.Server.GlspServer.InitializeClientSessionAsync(System.String,System.String,System.String[],System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Glsp.Server.GlspServer.ProcessAsync(System.String,NMF.Glsp.Protocol.BaseProtocol.BaseAction)">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Glsp.Server.GlspServer.ShutdownAsync">
            <inheritdoc/>
        </member>
        <member name="M:NMF.Glsp.Server.GlspServer.InitializeAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="T:NMF.Glsp.Server.StringDictionaryConverter">
            <summary>
            Denotes a JSON converter from JSON to a dictionary of string and object
            </summary>
        </member>
        <member name="F:NMF.Glsp.Server.StringDictionaryConverter.Instance">
            <summary>
            Gets the singleton instance
            </summary>
        </member>
        <member name="M:NMF.Glsp.Server.StringDictionaryConverter.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="M:NMF.Glsp.Server.StringDictionaryConverter.Write(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.IDictionary{System.String,System.Object},System.Text.Json.JsonSerializerOptions)">
            <inheritdoc />
        </member>
        <member name="T:NMF.Glsp.Server.TcpGlspServer">
            <summary>
            Denotes a plain TCP based GLSP server
            </summary>
        </member>
        <member name="M:NMF.Glsp.Server.TcpGlspServer.#ctor(NMF.Glsp.Contracts.IGlspServer)">
            <summary>
            Creates a TCP server for the given GLSP implementation
            </summary>
            <param name="server"></param>
        </member>
        <member name="P:NMF.Glsp.Server.TcpGlspServer.IPAddress">
            <summary>
            Gets or sets the IP address on which the server is running
            </summary>
        </member>
        <member name="P:NMF.Glsp.Server.TcpGlspServer.Port">
            <summary>
            Gets or sets the port on which the GLSP server is running
            </summary>
        </member>
        <member name="M:NMF.Glsp.Server.TcpGlspServer.RunAsync(System.Threading.CancellationToken)">
            <summary>
            Runs the GLSP server
            </summary>
            <param name="cancellationToken">A cancellation token to cancel the server</param>
            <returns></returns>
        </member>
        <member name="T:NMF.Glsp.Server.UndoRedo.GlspUndoStack">
            <summary>
            Denotes an undo stack for GLSP
            </summary>
        </member>
        <member name="M:NMF.Glsp.Server.UndoRedo.GlspUndoStack.Notify(NMF.Models.Changes.ModelChangeSet)">
            <summary>
            Notifies that a custom change set was performed
            </summary>
            <param name="changeSet">The change set that was performed</param>
        </member>
        <member name="M:NMF.Glsp.Server.UndoRedo.GlspUndoStack.NotifyModelOperation">
            <summary>
            Notifies that a model operation was performed
            </summary>
        </member>
        <member name="P:NMF.Glsp.Server.UndoRedo.GlspUndoStack.CanUndo">
            <summary>
            True, of an undo operation is currently supported, otherwise false
            </summary>
        </member>
        <member name="P:NMF.Glsp.Server.UndoRedo.GlspUndoStack.CanRedo">
            <summary>
            True, if a redo operation is currently supported, otherwise false
            </summary>
        </member>
        <member name="M:NMF.Glsp.Server.UndoRedo.GlspUndoStack.Undo(NMF.Models.Services.IModelSession)">
            <summary>
            Performs an undo operation
            </summary>
            <param name="modelSession">the model session for which to perform the undo operation</param>
            <exception cref="T:System.InvalidOperationException">Thrown if undo is currently not allowed</exception>
        </member>
        <member name="M:NMF.Glsp.Server.UndoRedo.GlspUndoStack.Redo(NMF.Models.Services.IModelSession)">
            <summary>
            Performs a redo operation
            </summary>
            <param name="modelSession">the model session for which to perform the redo operation</param>
            <exception cref="T:System.InvalidOperationException">Thrown if redo is currently not allowed</exception>
        </member>
    </members>
</doc>
